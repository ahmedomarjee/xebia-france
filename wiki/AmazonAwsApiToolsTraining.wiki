#summary Discover Amazon Aws API Tools

= Install =

== Download ==
 
 * [http://aws.amazon.com/developertools/351 Amazon EC2 API Tools]
 * [http://aws.amazon.com/developertools/2536 Elastic Load Balancing API Tools]
 * [http://aws.amazon.com/developertools/Amazon-RDS/2928 Amazon RDS Command Line Toolkit]
 * [http://xebia-france.googlecode.com/svn/training/xebia-spring-travel/trunk/xebia-spring-travel-amazon-aws/src/main/resources/cloud-config-amzn-linux.txt Fichier CloudInit]

== Configure ==

Sample extract from {{{.profile}}}
{{{
export EC2_HOME=~/aws-tools/ec2
export AWS_RDS_HOME=~/aws-tools/rds
export AWS_ELB_HOME=~/aws-tools/elb

export PATH=$PATH:$EC2_HOME/bin:$AWS_RDS_HOME/bin:$AWS_ELB_HOME/bin

# EC2_REGION works for rds tools and elb tools but not for ec2 tools
export EC2_REGION=eu-west-1
# for ec2 tools
export EC2_URL=https://ec2.eu-west-1.amazonaws.com

export AWS_CREDENTIAL_FILE=~/.aws/aws-credentials.txt
export EC2_CERT=~/.aws/cert-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem
export EC2_PRIVATE_KEY=~/.aws/pk-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem

export JAVA_HOME=/PATH/VERS/JAVA/HOME
# MacOS X
# export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home/
}}}

Rechargement du profile
{{{
source ~/.profile
}}}

= Amazon Relational Data Service (RDS) =

[http://awsdocs.s3.amazonaws.com/RDS/latest/rds-qrc.pdf Amazon Relational Database Service Quick Reference Card (pdf)]

== Create a MySQL Database ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Create a MySQL database with:*
    * {{{DBInstanceIdentifier}}}: petclinic-my-tri-gram
    * {{{db-name}}}: petclinic
    * {{{db-instance-class}}}: db.m1.small
    * {{{engine}}}: MySQL
    * {{{master-user-password}}}: petclinic
    * {{{master-username}}}: petclinic
    * {{{db-security-groups}}}: default
    * {{{allocated-storage}}}: 5 Go
    * {{{backup-retention-period}}}: 0
 
Docs [http://docs.amazonwebservices.com/AmazonRDS/latest/CommandLineReference/index.html?CLIReference-cmd-CreateDBInstance.html Amazon Relational Database Service (RDS) > Command Line Reference > API Command Line Tools Reference > rds-create-db-instance]

{{{
rds-create-db-instance 
	DBInstanceIdentifier
	-s (--allocated-storage) value
	-c (--db-instance-class) value
	-e (--engine) value
	-lm (--license model) value
	-p (--master-user-password) value
	-u (--master-username) value
	[-au (--auto-minor-version-upgrade) value ]
	[-v (--engine-version) value ]
	[-z (--availability-zone) value ]
	[--db-name value ]
	[-g (--db-parameter-group) value]
	[-m (--multi-az) value]
	[-a (--db-security-groups) value[,value...] ]
	[--port value ]
	[-w (--preferred-maintenance-window) value ]
	[-r (--backup-retention-period) value ]
	[-b (--preferred-backup-window) value ]
	[General Options]
}}}

Answer [AmazonAwsApiToolsTrainingAnswerRds].

== Describe MySQL Instance ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Retrieve the Hostname (xyz.eu-west-1.rds.amazonaws.com) of your database*

[http://docs.amazonwebservices.com/AmazonRDS/latest/CommandLineReference/index.html?CLIReference-cmd-DescribeDBInstances.html Amazon Relational Database Service (RDS) > Command Line Reference > API Command Line Tools Reference > rds-describe-instances]

{{{
rds-describe-db-instances 
	[DBInstanceIdentifier ]
	[--max-records ] value
}}}

Answer [AmazonAwsApiToolsTrainingAnswerRds].

= Amazon EC2 =

[http://awsdocs.s3.amazonaws.com/EC2/latest/ec2-qrc.pdf Amazon EC2 Quick Reference Card (pdf)]

== Create Linux instances ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Create two EC2 instances*
    * {{{ami_id}}}: ami-47cefa33
    * {{{instance_count}}}: 2
    * {{{group}}}: tomcat
    * {{{keypair}}}: xebia-france
    * {{{instance_type}}}: t1.micro
    * {{{user_data_file}}}: <chemin vers votre fichier CloudInit> (cf section Download)


Docs [http://docs.amazonwebservices.com/AWSEC2/latest/CommandLineReference/index.html?ApiReference-cmd-RunInstances.html Amazon EC2 > Command Line Reference > API Tools Reference > ec2-run-instances]

{{{
ec2-run-instances 
   ami_id 
   [-n instance_count] 
   [-g group [-g group ...]] 
   [-k keypair] 
   [-d user_data |-f user_data_file] 
   [--addressing addressing_type] 
   [--instance-type instance_type] 
   [--availability-zone zone] 
   [--kernel kernel_id] 
   [--ramdisk ramdisk_id] 
   [--block-device-mapping block_device_mapping] 
   [--monitor] 
   [--disable-api-termination] 
   [--instance-initiated-shutdown-behavior behavior] 
   [--placement-group placement-group] 
   [--tenancy tenancy] 
   [--subnet subnet] 
   [--private-ip-address ip_address] 
   [--client-token token]
}}}

== Name your instances with the "Name" tag ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Give a name 'petclinic-my-tri-gram' to your Amazon instances with the "Name" tag*

Docs [http://docs.amazonwebservices.com/AWSEC2/latest/CommandLineReference/index.html?ApiReference-cmd-CreateTags.html Amazon EC2 > Command Line Reference > API Tools Reference > ec2-create-tags]

{{{
ec2-create-tags 
   resource_id [resource_id ...] 
   --tag key[=value] [--tag key[=value] ...]
}}}

= Amazon Elastic Load Balancing API =

[http://awsdocs.s3.amazonaws.com/ElasticLoadBalancing/latest/elb-qrc.pdf Elastic Load Balancing Quick Reference Card (pdf)]

== Create Load Balancer ==

[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_CreateLoadBalancer.html ELB Documentation > Elastic Load Balancing API Reference > Actions > CreateLoadBalancer]

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Create a load balancer named "petclinic-my-tri-gram" handking HTTP from 80 to 8080. To ease the setup, associate it with all the availability zones "eu-west-1a,eu-west-1b,eu-west-1c"*

{{{
elb-create-lb 
   LoadBalancerName 
   --availability-zones value [, value...] 
   --listener "protocol=value,lb-port=value,instance-port=value [,certid=value]"
   [--listener "protocol=value,lb-port=value,instance-port=value [,certid=value]"...]
}}}

Answer [AmazonAwsApiToolsTrainingAnswerElb]

== Configure health check ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Configure a healthcheck targeting "HTTP:8080/" with threshold "2" and timeout "2" and interval "30"*

[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_ConfigureHealthCheck.html ELB Documentation > Elastic Load Balancing API Reference > Actions > ConfigureHealthCheck]

{{{
elb-configure-healthcheck 
	LoadBalancerName
	--target value 
	--healthy-threshold value 
	--unhealthy-threshold value 
	--interval value 
	--timeout value
}}}

== Register instances with load balancer ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Register your linux instances*

[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_RegisterInstancesWithLoadBalancer.html ELB Documentation > Elastic Load Balancing API Reference > Actions > RegisterInstancesWithLoadBalancer]

{{{
elb-register-instances-with-lb 
   LoadBalancerName
   --instances value [, value...]
}}}

== Configure Load Balancer managed cookie stickiness ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="30" /> *Configure cookie based stickiness giving policyname "petclinic-policy-my-tri-gram"*

[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_CreateLBCookieStickinessPolicy.html ELB Documentation > Elastic Load Balancing API Reference > Actions > CreateLBCookieStickinessPolicy]

{{{
elb-create-lb-cookie-stickiness-policy 
   LoadBalancerName
   --policy-name value 
   [--expiration-period value]
}}}