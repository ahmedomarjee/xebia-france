#summary Discover Amazon Aws API Tools

<wiki:toc max_depth="2" />

<br/>
----
<br/>

= Install =

== Linux / MacOS X ==

=== Download ===

 * [https://s3-eu-west-1.amazonaws.com/java-infra-as-code-on-amzn-ec2-1/aws-tools.tar.gz aws-tools.tar.gz]: all in one Amazon AWS API Command Lines (ec2 + rds + elb),
 * [https://s3-eu-west-1.amazonaws.com/java-infra-as-code-on-amzn-ec2-1/aws-keys.tar.gz aws-keys.tar.gz]: Amazon AWS API Credentials (access key + signing certificate)

<br/>
extract them into your home folder.
<br/>
=== Configure ===

 * Sample extract from {{{.profile}}}
{{{
export EC2_HOME=~/aws-tools/ec2
export AWS_RDS_HOME=~/aws-tools/rds
export AWS_ELB_HOME=~/aws-tools/elb

export PATH=$PATH:$EC2_HOME/bin:$AWS_RDS_HOME/bin:$AWS_ELB_HOME/bin

# EC2_REGION works for rds tools and elb tools but not for ec2 tools
export EC2_REGION=eu-west-1
# for ec2 tools
export EC2_URL=https://ec2.eu-west-1.amazonaws.com

export AWS_CREDENTIAL_FILE=~/.aws/aws-credentials.txt
export EC2_CERT=~/.aws/cert-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem
export EC2_PRIVATE_KEY=~/.aws/pk-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem

export JAVA_HOME=/PATH/VERS/JAVA/HOME
# MacOS X
# export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home/
}}}
 * check that your clock is well synchronized : you might get timestamp error otherwise when using the command lines.

== Windows ==

=== Download ===
 
 * [https://s3-eu-west-1.amazonaws.com/java-infra-as-code-on-amzn-ec2-1/aws-tools.zip aws-tools.zip]: all in one Amazon AWS API Command Lines (ec2 + rds + elb),
 * [https://s3-eu-west-1.amazonaws.com/java-infra-as-code-on-amzn-ec2-1/aws-keys.zip aws-keys.zip]: Amazon AWS API Credentials (access key + signing certificate)

<br/>
extract them into your c: drive.
<br/>
=== Configure ===

 * Create the followings environment variables:
{{{
EC2_HOME=c:\aws-tools\ec2
AWS_RDS_HOME=c:\aws-tools\rds
AWS_ELB_HOME=c:\aws-tools\elb

PATH=%PATH%;%EC2_HOME%\bin;%AWS_RDS_HOME%\bin;%AWS_ELB_HOME%\bin

# EC2_REGION works for rds tools and elb tools but not for ec2 tools
EC2_REGION=eu-west-1
# for ec2 tools
EC2_URL=https://ec2.eu-west-1.amazonaws.com

AWS_CREDENTIAL_FILE=c:\aws\aws-credentials.txt
EC2_CERT=c:\aws\cert-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem
EC2_PRIVATE_KEY=c:\aws\pk-AWVCG4HIN5C6I6ZY5JFHU7XQW3BZF7OK.pem

JAVA_HOME=\PATH\VERS\JAVA\HOME
}}}

<br/>
----
<br/>

= Amazon Relational Data Service (RDS) =

[http://awsdocs.s3.amazonaws.com/RDS/latest/rds-qrc.pdf Amazon Relational Database Service Quick Reference Card (pdf)]

== Create a MySQL Database ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" />
*Create a MySQL database with:*
    * {{{DBInstanceIdentifier}}}: petclinic-my-tri-gram
    * {{{db-name}}}: petclinic
    * {{{db-instance-class}}}: db.m1.small
    * {{{engine}}}: MySQL
    * {{{master-user-password}}}: petclinic
    * {{{master-username}}}: petclinic
    * {{{db-security-groups}}}: default
    * {{{allocated-storage}}}: 5 Go
    * {{{backup-retention-period}}}: 0
 
<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> [http://docs.amazonwebservices.com/AmazonRDS/latest/CommandLineReference/index.html?CLIReference-cmd-CreateDBInstance.html Amazon RDS > Command Line Reference > API Command Line Tools Reference > rds-create-db-instance]

<font size="1">
<pre>
rds-create-db-instance 
	DBInstanceIdentifier
	-s (--allocated-storage) value
	-c (--db-instance-class) value
	-e (--engine) value
	-lm (--license model) value
	-p (--master-user-password) value
	-u (--master-username) value
	`[`-au (--auto-minor-version-upgrade) value `]` 
	`[`-v (--engine-version) value `]` 
	`[`-z (--availability-zone) value `]` 
	`[`--db-name value `]` 
	`[`-g (--db-parameter-group) value`]` 
	`[`-m (--multi-az) value`]` 
	`[`-a (--db-security-groups) value`[`,value...`]` `]` 
	`[`--port value `]` 
	`[`-w (--preferred-maintenance-window) value `]` 
	`[`-r (--backup-retention-period) value `]` 
	`[`-b (--preferred-backup-window) value `]` 
	`[`General Options`]`
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerRds#Create_a_MySQL_Database].

<br/>
== Describe MySQL Instance ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Retrieve the Hostname (xyz.eu-west-1.rds.amazonaws.com) of your database*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/AmazonRDS/latest/CommandLineReference/index.html?CLIReference-cmd-DescribeDBInstances.html Amazon RDS > Command Line Reference > API Command Line Tools Reference > rds-describe-instances]

<font size="1">
<pre>
rds-describe-db-instances 
	`[`DBInstanceIdentifier `]` 
	`[`--max-records `]` value
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerRds#Describe_Instances].

<br/>
----
<br/>

= Amazon EC2 =

[http://awsdocs.s3.amazonaws.com/EC2/latest/ec2-qrc.pdf Amazon EC2 Quick Reference Card (pdf)]

== Create Linux instances ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Create two EC2 instances*
    * {{{ami_id}}}: ami-47cefa33
    * {{{instance-count}}}: 2
    * {{{group}}}: tomcat
    * {{{keypair}}}: xebia-france
    * {{{instance-type}}}: t1.micro
    * {{{user-data-file}}}: <see below>

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" />Choose your !CloudInit !UserData file:
  ** [http://xebia-france.googlecode.com/svn/training/java-infra-as-code-with-amzn-aws/trunk/src/main/resources/cloud-config-amzn-linux.txt cloud-config-amzn-linux.txt] Simple cloud-config to install tomcat6 RPM (don't deploy petclinic.war)
  ** [http://xebia-france.googlecode.com/svn/training/java-infra-as-code-with-amzn-aws/trunk/src/test/resources/userdata-amzn-linux.txt userdata-amzn-linux.txt] Multipart cloud-config to install tomcat6 RPM (via cloud-config) and deploy petclinic.war (via a python shell script)



<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" />  [http://docs.amazonwebservices.com/AWSEC2/latest/CommandLineReference/index.html?ApiReference-cmd-RunInstances.html Amazon EC2 > Command Line Reference > API Tools Reference > ec2-run-instances]

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" />  
Docs AMI [http://aws.amazon.com/amazon-linux-ami/]

<font size="1">
<pre>
ec2-run-instances 
   ami_id 
   `[`-n instance_count`]`  
   `[`-g group `[`-g group ...`]``]`  
   `[`-k keypair`]` 
   `[`-d user_data |-f user_data_file`]` 
   `[`--addressing addressing_type`]` 
   `[`--instance-type instance_type`]` 
   `[`--availability-zone zone`]` 
   `[`--kernel kernel_id`]` 
   `[`--ramdisk ramdisk_id`]` 
   `[`--block-device-mapping block_device_mapping`]` 
   `[`--monitor`]` 
   `[`--disable-api-termination`]` 
   `[`--instance-initiated-shutdown-behavior behavior`]` 
   `[`--placement-group placement-group`]` 
   `[`--tenancy tenancy`]` 
   `[`--subnet subnet`]` 
   `[`--private-ip-address ip_address`]` 
   `[`--client-token token`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/d/b/d/3/1194998844557242824messagebox_warning.svg.med.png" width="20" />
You will need to remember the names of the created instances (i-XXXXXXXX).

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerEc2#Create_Linux_instances].

<br/>
== Name your instances with the "Name" tag ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Give a name 'petclinic-my-tri-gram' to your Amazon instances with the "Name" tag*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" />
[http://docs.amazonwebservices.com/AWSEC2/latest/CommandLineReference/index.html?ApiReference-cmd-CreateTags.html Amazon EC2 > Command Line Reference > API Tools Reference > ec2-create-tags]

<font size="1">
<pre>
ec2-create-tags 
   resource_id `[`resource_id ...`]` 
   --tag key`[`=value`]` `[`--tag key`[`=value`]` ...`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/d/b/d/3/1194998844557242824messagebox_warning.svg.med.png" width="20" /> The tag key should be exactly Name ie with a uppercase N.

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerEc2#Tag_instances_/_give_them_a_name].

<br/>
----
<br/>

= Amazon Elastic Load Balancing API =

[http://awsdocs.s3.amazonaws.com/ElasticLoadBalancing/latest/elb-qrc.pdf Elastic Load Balancing Quick Reference Card (pdf)]

== Create Load Balancer ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Create a load balancer named "petclinic-my-tri-gram" handking HTTP from 80 to 8080. To ease the setup, associate it with all the availability zones "eu-west-1a,eu-west-1b,eu-west-1c"*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_CreateLoadBalancer.html ELB > Elastic Load Balancing API Reference > Actions > CreateLoadBalancer]

<font size="1">
<pre>
elb-create-lb 
   !LoadBalancerName 
   --availability-zones value `[`, value...`]` 
   --listener "protocol=value,lb-port=value,instance-port=value `[`,certid=value`]`" 
   `[`--listener "protocol=value,lb-port=value,instance-port=value `[`,certid=value`]`"...`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerElb#Create_Load_Balancer]

<br/>
== Configure health check ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Configure a healthcheck targeting "HTTP:8080/" with threshold (healthy & unhealthy) "2" and timeout "2" and interval "30"*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_ConfigureHealthCheck.html ELB > Elastic Load Balancing API Reference > Actions > ConfigureHealthCheck]

<font size="1">
<pre>
elb-configure-healthcheck 
	!LoadBalancerName 
	--target value 
	--healthy-threshold value 
	--unhealthy-threshold value 
	--interval value 
	--timeout value 
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerElb#Configure_health_check]

<br/>
== Register instances with load balancer ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Register your linux instances*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_RegisterInstancesWithLoadBalancer.html ELB > Elastic Load Balancing API Reference > Actions > RegisterInstancesWithLoadBalancer]

<font size="1">
<pre>
elb-register-instances-with-lb 
   !LoadBalancerName 
   --instances value `[`, value...`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerElb#Register_instances]

<br/>
== Create load balancer stickiness policy ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Configure cookie based stickiness giving policyname "petclinic-policy-my-tri-gram"*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_CreateLBCookieStickinessPolicy.html ELB > Elastic Load Balancing API Reference > Actions > CreateLBCookieStickinessPolicy]

<font size="1">
<pre>
elb-create-lb-cookie-stickiness-policy 
   !LoadBalancerName 
   --policy-name value 
   `[`--expiration-period value`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerElb#Create_load_balancer_stickiness_policy]

<br/>
== Set Created Policy To Load Balancer ==

<img src="http://www.clker.com/cliparts/9/1/4/0/11954322131712176739question_mark_naught101_02.svg.med.png" width="20" /> *Set Created Policy To Load Balancer*

<img src="http://www.clker.com/cliparts/w/x/4/3/m/V/blue-information-glossy-button-md.png" width="20" /> 
[http://docs.amazonwebservices.com/ElasticLoadBalancing/latest/APIReference/index.html?API_SetLoadBalancerPoliciesOfListener.html ELB > Elastic Load Balancing API Reference > Actions > SetLoadBalancerPoliciesOfListener]

<font size="1">
<pre>
elb-set-lb-policies-of-listener 
        !LoadBalancerName 
        --lb-port  value 
        --policy-names  value`[`,value...`]` 
        `[`General Options`]` 
</pre>
</font>

<img src="http://www.clker.com/cliparts/3/d/e/4/12428083851546739178Symbol_OK.svg.med.png" width="20" />
Answer [AmazonAwsApiToolsTrainingAnswerElb#Set_up_policy]