#summary servlet filter to prevent brute force authentication requests.

= Description =
The IpBanner filter is a java implementation of [http://www.fail2ban.org fail2ban].
Its aim is to provide a protection over brute force authentication requests
using a ban mechanism based on client IP address.

This implementation can be deployed as a Filter over any J2EE compliant
Application Server (actually tested on Tomcat and Jetty).

= How it works =
in case of authentication failure, the IP address of the client that submit the
authentication request is stored in IpBanner. After a number of retry, the
filter will ban the IP address and reject the connection attempt with a
403/Forbidden error.

The maximum number of retry and the ban duration can be configured at filter
level.

The IpBanner filter detects authentication failures using a configurable list of
HTTP response status (401/Unauthorized and 403/Forbidden by default).
It will also consider that the authentication is a failure if the request
contains a failureRequest attribute (defined in filter configuration using the
param-name failureRequestAttributeName). This is mostly useful for tests.

Each time an authentication request is banned, its IP address is inserted in an
IpBanner bucket. If this IP already exists, we increment the associated failed
attempts counter. If the maximum number of retry is reached on a new failed
attempt, the IP address is banned and the filter will reject with a
403/Forbidden error this and the following request until the ban duration will
be reached.
IP address are banned for a configurable amount of time. When the time is
reached, the IP will be unbanned but the IP address will stay in the bucket so
on the next authentication failure, the IP will be directly banned.

IP address are never removed from buckets but buckets are removed after a
configurable amount of time. The life time for a bucket is defined by filter
parameter bucketTimeToLive.

= How to use it =
== Filter installation ==
=== Manual installation ===
TODO.
=== Maven dependency ===
TODO
== Filter configuration ==
The filter is defined in your application 'web.xml' :
{{{
<filter>
  <display-name>IP Banner</display-name>
  <filter-class>fr.xebia.ipbanner.IpBannerFilter</filter-class>
  <init-param>
    <param-name>failureResponseStatusCodes</param-name>
    <param-value>401,403</param-value>
  </init-param
  <init-param>
    <param-name>failureRequestAttributeName</param-name>
    <param-value>IpBannerFilter.failure</param-value>
  </init-param>
  <init-param>
    <param-name>maxRetry</param-name>
    <param-value>10</param-value>
  </init-param>
  <init-param>
    <param-name>banTimeInSecond</param-name>
    <param-value>60</param-value>
  </init-param>
  <init-param>
    <param-name>bucketTimeToLive</param-name>
    <param-value>600</param-value>
  </init-param>
</filter>
}}}
The following parameters are used to configure the *IpBanner* Filter :
 * *failureResponseStatusCodes* : defines the list of status code corresponding to a failed connection attempt (default value is 401,403).
 * *failureRequestAttributeName* : defines a request attribute that implies a failed authentication request. This is mostly used for test purpose.
 * *maxRetry* : defines the number of retry before considering that the IP address must be banned (default to 10 times).
 * *banTimeInSecond* : defines how many time an IP address must be banned (default 60 seconds)
 * *bucketTimeToLive* : defines the life time of a bucket (default to 600 seconds)

== Configuration application authentication ==
Coming soon...

== Put it all together ==
You can set the response status to notify the failure of the authentication
request :
{{{
<c:if test="${param.authfailed == 'true'}">
    <%response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);%>
...
</c:if>
}}}
Coming soon...

= Troubleshooting =
== Servlet security constraint ==
The IpBanner filter can't be used associated with a servlet security constraint
because the failed authentication request will be rejected before entering
the application server filter mechanism.

Coming soon...