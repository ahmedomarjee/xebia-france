#summary Discover Amazon Aws Java SDK

<wiki:toc max_depth="2" />

= Goal =

The goal is to deploy the Petclinic Web-app on two Amazon EC2 instances and add a load balancer between them using *Amazon AWS Java SDK*.

 <code lanquage="java">
 
 </code> 
 
= Get AwsCredentials from properties file =

 {{{
 InputStream credentialsAsStream = Thread.currentThread().getContextClassLoader()
                    .getResourceAsStream("AwsCredentials.properties");
 AWSCredentials credentials = new PropertiesCredentials(credentialsAsStream);
 }}} 
 
 AwsCredentials.properties file looks like this :
 {{{
#Insert your AWS Credentials from http://aws.amazon.com/security-credentials
accessKey=xxxxx
secretKey=xxxxx
 }}}

= Create Database instance =
 Amazon AWS propose Relational Database Service (RDS) to create ready to use database

 == Use RDS Client ==
 Use the West Europe End Point.
 
 {{{
 private AmazonRDS rds;
 rds = new AmazonRDSClient(credentials);
 rds.setEndpoint("rds.eu-west-1.amazonaws.com");
 }}}
 
 == Create DB Instance and wait for availability ==
 === Create DB Instance ===
 {{{
    DBInstance createDBInstance(String dbInstanceIdentifier) {
        DBInstance createDBInstance = rds.createDBInstance( //
                new CreateDBInstanceRequest() //
                        .withDBInstanceIdentifier(dbInstanceIdentifier) //
                        .withDBName("petclinic") //
                        .withDBInstanceClass("db.m1.small") //
                        .withEngine("MySQL") //
                        .withMasterUsername("petclinic") //
                        .withMasterUserPassword("petclinic") //
                        .withDBSecurityGroups("default") //
                        .withAllocatedStorage(5 /* Go */) //
                        .withBackupRetentionPeriod(0));
        return createDBInstance;
    } 
 }}}
 
 === Find DB Instance ===
 {{{
    DBInstance findDBInstance(String dbInstanceIdentifier) {
        try {
            DescribeDBInstancesResult describeDBInstances = rds.describeDBInstances(new DescribeDBInstancesRequest()
                    .withDBInstanceIdentifier(dbInstanceIdentifier));
            return Iterables.getFirst(describeDBInstances.getDBInstances(), null);
        } catch (DBInstanceNotFoundException e) {
            return null;
        }
    }
 }}}
 
 === Wait for availability ===
 {{{
    DBInstance waitForDBInstanceAvailability(String dbInstanceIdentifier) {
        while (true) {
            DBInstance dbInstance = findDBInstance(dbInstanceIdentifier);
            if (dbInstance == null) {
                throw new DBInstanceNotFoundException("Not DBInstance " + dbInstanceIdentifier + " exists");
            } else if ("available".equals(dbInstance.getDBInstanceStatus())) {
                return dbInstance;
            } else {
                try {
                    Thread.sleep(20000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    } 
 }}}
 
= Create Tomcat instances = 
 == Use EC2 Client ==
 {{{
 private AmazonEC2 ec2;
 ec2 = new AmazonEC2Client(credentials);
 ec2.setEndpoint("ec2.eu-west-1.amazonaws.com");
 }}}
 
 == Create EC2 Instances ==

 == Connect to an Amazon Linux Server ==
 
 == Install JVM and Tomcat ==
 
 == Install Petclinic web app ==
 
 
= Create a Load Balancer =
  == Use ELB Client ==
  
 {{{
 private AmazonElasticLoadBalancing elb;
 ec2 = new AmazonEC2Client(credentials);
 elb.setEndpoint("elasticloadbalancing.eu-west-1.amazonaws.com");
 }}}