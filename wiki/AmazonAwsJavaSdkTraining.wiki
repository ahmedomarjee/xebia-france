#summary Discover Amazon Aws SDK for Java

<wiki:toc max_depth="2" />

<br/>
----
<br/>

= Goal of the lab =

The goal of this lab is to code with Amazon AWS SDK for Java the deployment of the Petclinic application.

*A skeleton is provided at {{{fr.xebia.demo.amazon.aws.AmazonAwsPetclinicInfrastructureMaker}}}*:
 * we coded all the defensive code to prevent creation of too many instances,
 * you will code the "create" code

<br/>
----
<br/>

= Project Installation =


 * Checkout https://xebia-france.googlecode.com/svn/training/java-infra-as-code-with-amzn-aws/trunk/

 * The goal is to create methods in the _Maker_ file
  * <font size="2"><pre>/java-infra-as-code-with-amzn-aws/src/main/java/fr/xebia/demo/amazon/aws/!AmazonAwsPetclinicInfrastructureMaker.java</pre></font>

 * You can use the _!MakerTest_ file to run methods
  * <font size="2"><pre>/java-infra-as-code-with-amzn-aws/src/test/java/fr/xebia/demo/amazon/aws/!AmazonAwsPetclinicInfrastructureMakerTest.java</pre></font>
 
 * Answers are in the _!MakerAnswer_ file
  * <font size="2"><pre>/java-infra-as-code-with-amzn-aws/src/main/java/fr/xebia/demo/amazon/aws/!AmazonAwsPetclinicInfrastructureMakerAnswer.java</pre></font>
 
<br/>

== Get !AwsCredentials from properties file ==

{{{
    InputStream credentialsAsStream = Thread.currentThread().getContextClassLoader()
                     .getResourceAsStream("AwsCredentials.properties");
    AWSCredentials credentials = new PropertiesCredentials(credentialsAsStream);
}}} 
 
 !AwsCredentials.properties file looks like this :

{{{
#Insert your AWS Credentials from http://aws.amazon.com/security-credentials
accessKey=change me
secretKey=change me
}}}

<br/>
----
<br/>

= Create Database instance =
 Amazon AWS propose Relational Database Service (RDS) to create ready to use database

 == Use RDS Client ==
Use the EU-WEST-1 endpoint.
 
{{{
    private AmazonRDS rds;
    rds = new AmazonRDSClient(credentials);
    rds.setEndpoint("rds.eu-west-1.amazonaws.com");
}}}
 
 == Create DB Instance ==
 Params :
<font size="1">
<pre>
    DBInstanceIdentifier: petclinic-xeb
    DBName: petclinic
    DBInstanceClass : db.m1.small
    Engine : MySQL
    !MasterUsername : petclinic
    !MasterUserPassword : petclinic
    DBSecurityGroups : default
    !AllocatedStorage : 5 (Go)
    !BackupRetentionPeriod : 0
</pre>
</font>
 
{{{
    CreateDBInstanceRequest dbInstanceRequest = new CreateDBInstanceRequest() //
                                                    .with...
    DBInstance createDBInstance = rds.createDBInstance(dbInstanceRequest);
}}}

<br/>
----
<br/>
 
= Create Tomcat instances = 

 == Use `AmazonEC2Client` ==

 Use the EU-WEST-1 endpoint.

{{{
    AmazonEC2 ec2 = new AmazonEC2Client(credentials);
    ec2.setEndpoint("ec2.eu-west-1.amazonaws.com");
}}}
 
 == Create EC2 Instances ==
 Params :
 <font size="1">
<pre>
    !ImageId : ami-47cefa33
    !MinCount : 2
    !MaxCount : 2
    !SecurityGroups : tomcat
    !KeyName : xebia-france
    !InstanceType : InstanceType.T1Micro (String)
    !UserData : use super.buildCloudInitUserData(DBInstance dbInstance, String warUrl) Method
</pre>
</font>
 
{{{
    RunInstancesRequest runInstanceRequest = new RunInstancesRequest() //
                                               .with...();
    RunInstancesResult runInstances = ec2.runInstances(runInstanceRequest);
}}}
<pre>
You need to get Reservation object on !RunInstancesResult and after you can return getInstances().
</pre>

<br/>
----
<br/>

= Create a Load Balancer =

 == Use `AmazonElasticLoadBalancingClient` ==
 
Use the EU-WEST-1 endpoint.

{{{
    AmazonElasticLoadBalancing elb = new AmazonElasticLoadBalancingClient(credentials);
    elb.setEndpoint("elasticloadbalancing.eu-west-1.amazonaws.com");
}}}
 
 == Create an Elastic Load Balancer ==

 Params :
<font size="1">
<pre>
    !LoadBalancerName : elb + trigram
    Listener : "HTTP", 80 et 8080
    !AvailabilityZones : "eu-west-1a", "eu-west-1b", "eu-west-1c"
</pre>
</font>
 
{{{
    CreateLoadBalancerRequest createLoadBalancerRequest = new CreateLoadBalancerRequest() //
                .with...();
    elb.createLoadBalancer(createLoadBalancerRequest);
}}}
 
 == Configure !Ec2Instances ==
 Params :
<font size="1">
<pre>
    !LoadBalancerName : elb + trigram
    Instances : Add two ec2 Instances (Be careful, the ec2 instances to add are instances of com.amazonaws.services.elasticloadbalancing.model.Instance and not com.amazonaws.services.ec2.model.Instance)
</pre>
</font>
 
{{{
    List<com.amazonaws.services.elasticloadbalancing.model.Instance> instances = new ArrayList<com.amazonaws.services.elasticloadbalancing.model.Instance>();
    instances.add(...);
    instances.add(...);
        
    RegisterInstancesWithLoadBalancerRequest registerInstancesWithLoadBalancerRequest = new RegisterInstancesWithLoadBalancerRequest( //
                loadBalancerName, //
                instances);
        elb.registerInstancesWithLoadBalancer(registerInstancesWithLoadBalancerRequest);
}}}