#summary Discover Amazon Aws Java SDK

<wiki:toc max_depth="2" />

= Goal =

The goal is to deploy the Petclinic Web-app on two Amazon EC2 instances and add a load balancer between them using *Amazon AWS Java SDK*.
 
= Get !AwsCredentials from properties file =

 {{{
 InputStream credentialsAsStream = Thread.currentThread().getContextClassLoader()
                    .getResourceAsStream("AwsCredentials.properties");
 AWSCredentials credentials = new PropertiesCredentials(credentialsAsStream);
 }}} 
 
 !AwsCredentials.properties file looks like this :
 {{{
#Insert your AWS Credentials from http://aws.amazon.com/security-credentials
accessKey=change me
secretKey=change me
 }}}

= Create Database instance =
 Amazon AWS propose Relational Database Service (RDS) to create ready to use database

 == Use RDS Client ==
 Use the West Europe End Point.
 
 {{{
 private AmazonRDS rds;
 rds = new AmazonRDSClient(credentials);
 rds.setEndpoint("rds.eu-west-1.amazonaws.com");
 }}}
 
 == Create DB Instance and wait for availability ==
 === Create DB Instance ===
 
 {{{
 DBInstanceIdentifier: petclinic-xeb //
  DBName: "petclinic"
 }}}
 {{{
    	DBInstance createDBInstance = rds.createDBInstance( //
                new CreateDBInstanceRequest() //
                        .with...
        return createDBInstance;
    } 
 }}}
 
 <wiki:comment>
 === Find DB Instance ===
 {{{
    DBInstance findDBInstance(String dbInstanceIdentifier) {
        try {
            DescribeDBInstancesResult describeDBInstances = rds.describeDBInstances( //
                    new DescribeDBInstancesRequest()
                        .withDBInstanceIdentifier(dbInstanceIdentifier));
            return Iterables.getFirst(describeDBInstances.getDBInstances(), null);
        } catch (DBInstanceNotFoundException e) {
            return null;
        }
    }
 }}}
 
 === Wait for availability ===
 {{{
    DBInstance waitForDBInstanceAvailability(String dbInstanceIdentifier) {
        while (true) {
            DBInstance dbInstance = findDBInstance(dbInstanceIdentifier);
            if (dbInstance == null) {
                throw new DBInstanceNotFoundException("Not DBInstance " + dbInstanceIdentifier + " exists");
            } else if ("available".equals(dbInstance.getDBInstanceStatus())) {
                return dbInstance;
            } else {
                try {
                    Thread.sleep(20000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    } 
 }}}
 
 == Use a Test Class to run DB Instance creation ==
 {{{
     @Test
    public void test_find_dbinstances_return_null_when_not_exist() {
        AmazonAwsPetclinicInfrastructureMaker maker = new AmazonAwsPetclinicInfrastructureMaker();
        Assert.assertNull("No DB Instance must be returned", maker.findDBInstance("notexist"));
    }

    @Test
    public void test_create_dbinstances() {
        AmazonAwsPetclinicInfrastructureMaker maker = new AmazonAwsPetclinicInfrastructureMaker();
        Assert.assertNotNull("No DB Instance available", maker.createDBInstanceAndWaitForAvailability("petclinic-xeb"));

    }
 }}}
 </wiki:comment>
 
 
= Create Tomcat instances = 
 == Use EC2 Client ==
 Use the West Europe End Point.
 {{{
 private AmazonEC2 ec2;
 ec2 = new AmazonEC2Client(credentials);
 ec2.setEndpoint("ec2.eu-west-1.amazonaws.com");
 }}}
 
 == Create EC2 Instances ==
 {{{
     List<Instance> createTwoEC2Instances() {

        RunInstancesResult runInstances = ec2.runInstances( //
                new RunInstancesRequest() //
                        .withImageId("ami-47cefa33");
                        .withMinCount(2) //
                        .withMaxCount(2) //
                        .withSecurityGroups("tomcat") //
                        .withKeyName("xebia-france") //
                        .withInstanceType(InstanceType.T1_MICRO) //
                );
        Reservation reservation = runInstances.getReservation();
        return reservation.getInstances();
    }
 }}}
 
 <wiki:comment>
 == Tag Instances ==
 {{{
     void tagInstances(List<Instance> instances, String trigram) {
        int i = 1;
        for (Instance instance : instances) {
            ec2.createTags(new CreateTagsRequest() //
                    .withResources(instance.getInstanceId()) //
                    .withTags(new Tag("Name", "petclinic-" + trigram + "-" + i), //
                            new Tag("Owner", trigram), //
                            new Tag("Role", "tomcat-petclinic")) //
            );
            i++;
        }
    }
 }}}
 
 === Terminate already existing instances ===
 {{{
    void terminateMyAlreadyExistingEC2Instances(String trigram) {
        List<Instance> instances = new ArrayList<Instance>();
        
        DescribeInstancesResult describeInstances = ec2.describeInstances(new DescribeInstancesRequest() //
                .withFilters(new Filter("tag:Name", Arrays.asList("petclinic-" + trigram + "-*"))));
        for (Reservation reservation : describeInstances.getReservations()) {
            for (Instance instance : reservation.getInstances()) {
                instances.add(instance);
            }
        }

        List<String> instanceIds = new ArrayList<String>();
        for (Instance instance : instances) {
            instanceIds.add(instance.getInstanceId());
        }

        if (!instanceIds.isEmpty()) {
            ec2.terminateInstances(new TerminateInstancesRequest()//
                    .withInstanceIds(instanceIds));
        }
    }
 }}}
 
 == Use a Test Class to run EC2 Instances and Tag it ==
 {{{
     @Test
    public void test_create_ec2instances_and_tag() {
        AmazonAwsPetclinicInfrastructureMaker maker = new AmazonAwsPetclinicInfrastructureMaker();
        Assert.assertNotNull("No EC2 Instance created",maker.terminateExistingAndCreateNewInstance("xeb"));
    }
 }}}
 </wiki:comment>
 
= Create a Load Balancer =
  == Use ELB Client ==
 Use the West Europe End Point.
 {{{
 private AmazonElasticLoadBalancing elb;
 ec2 = new AmazonEC2Client(credentials);
 elb.setEndpoint("elasticloadbalancing.eu-west-1.amazonaws.com");
 }}}
 
 == Create Elastic Load Balancer ==
 {{{
        List<Instance> ec2Instances = displayInstancesDetails(trigram);

        String expectedAvailabilityZones = ec2Instances.get(0).getPlacement().getAvailabilityZone();
        Listener expectedListener = new Listener("HTTP", 80, 8080);

        CreateLoadBalancerRequest createLoadBalancerRequest = new CreateLoadBalancerRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withAvailabilityZones(expectedAvailabilityZones) //
                .withListeners(expectedListener);
        
        elb.createLoadBalancer(createLoadBalancerRequest);
        
        // AVAILABILITY ZONES
        elb.enableAvailabilityZonesForLoadBalancer(new EnableAvailabilityZonesForLoadBalancerRequest(loadBalancerName, //
                                                                            Lists.newArrayList(expectedAvailabilityZones)));
        
        // HEALTH CHECK
        String healthCheckUri = "/petclinic/healthcheck.jsp";
        createElasticLoadBalancerHealthCheck(loadBalancerName, healthCheckUri);
        
        // COOKIE STICKINESS
        final LBCookieStickinessPolicy expectedLbCookieStickinessPolicy = new LBCookieStickinessPolicy( //
                "petclinic" + "-stickiness-policy", null);
        createElasticLoadBalancerCookieStickiness(loadBalancerName, expectedLbCookieStickinessPolicy);
        
        // POLICY
        createElasticLoadBalancerPolicy(loadBalancerName, expectedListener, expectedLbCookieStickinessPolicy);
        
        // EC2 INSTANCES
        List<com.amazonaws.services.elasticloadbalancing.model.Instance> elbInstances = //
                                                    new ArrayList<com.amazonaws.services.elasticloadbalancing.model.Instance>();
        elbInstances.add(new com.amazonaws.services.elasticloadbalancing.model.Instance(ec2Instances.get(0).getInstanceId()));
        elbInstances.add(new com.amazonaws.services.elasticloadbalancing.model.Instance(ec2Instances.get(1).getInstanceId()));

        elb.registerInstancesWithLoadBalancer(new RegisterInstancesWithLoadBalancerRequest( //
                loadBalancerName, //
                elbInstances));
 }}}
 
 == Configure !HealthCheck ==
 {{{
        HealthCheck expectedHealthCheck = new HealthCheck() //
                .withTarget("HTTP:8080" + healthCheckUri) //
                .withHealthyThreshold(2) //
                .withUnhealthyThreshold(2) //
                .withInterval(30) //
                .withTimeout(2);

        elb.configureHealthCheck(new ConfigureHealthCheckRequest(loadBalancerName, expectedHealthCheck));
 }}}
 
 == Cookie Stickiness ==
 {{{
        CreateLBCookieStickinessPolicyRequest createLbCookieStickinessPolicy = new CreateLBCookieStickinessPolicyRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withPolicyName(expectedLbCookieStickinessPolicy.getPolicyName()) //
                .withCookieExpirationPeriod(expectedLbCookieStickinessPolicy.getCookieExpirationPeriod());
        
        elb.createLBCookieStickinessPolicy(createLbCookieStickinessPolicy);
 }}}
 
 == Load Balancer Policy ==
 {{{
       SetLoadBalancerPoliciesOfListenerRequest setLoadBalancerPoliciesOfListenerRequest = new SetLoadBalancerPoliciesOfListenerRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withLoadBalancerPort(expectedListener.getLoadBalancerPort()) //
                .withPolicyNames(expectedLbCookieStickinessPolicy.getPolicyName());
        
        elb.setLoadBalancerPoliciesOfListener(setLoadBalancerPoliciesOfListenerRequest);
 }}}
 
 