#summary Discover Amazon Aws Java SDK

<wiki:toc max_depth="2" />

= Goal =

The goal is to deploy the Petclinic Web-app on two Amazon EC2 instances and add a load balancer between them using *Amazon AWS Java SDK*.
 
= Get !AwsCredentials from properties file =

 {{{
 InputStream credentialsAsStream = Thread.currentThread().getContextClassLoader()
                    .getResourceAsStream("AwsCredentials.properties");
 AWSCredentials credentials = new PropertiesCredentials(credentialsAsStream);
 }}} 
 
 !AwsCredentials.properties file looks like this :
 {{{
#Insert your AWS Credentials from http://aws.amazon.com/security-credentials
accessKey=change me
secretKey=change me
 }}}

= Create Database instance =
 Amazon AWS propose Relational Database Service (RDS) to create ready to use database

 == Use RDS Client ==
 Use the West Europe End Point.
 
 {{{
 private AmazonRDS rds;
 rds = new AmazonRDSClient(credentials);
 rds.setEndpoint("rds.eu-west-1.amazonaws.com");
 }}}
 
 == Create DB Instance and wait for availability ==
 === Create DB Instance ===
 Params :
 {{{
	DBInstanceIdentifier: petclinic-xeb
	DBName: petclinic
    DBInstanceClass : db.m1.small
    Engine : MySQL
    MasterUsername : petclinic
    MasterUserPassword : petclinic
    DBSecurityGroups : default
    AllocatedStorage : 5 (Go)
    BackupRetentionPeriod : 0
 }}}
 
 Création de la Base de données:
 {{{
 		CreateDBInstanceRequest dbInstanceRequest = new CreateDBInstanceRequest() //
				.with...
    	DBInstance createDBInstance = rds.createDBInstance(dbInstanceRequest);
 }}}

 
= Create Tomcat instances = 
 == Use EC2 Client ==
 Use the West Europe End Point.
 {{{
 private AmazonEC2 ec2;
 ec2 = new AmazonEC2Client(credentials);
 ec2.setEndpoint("ec2.eu-west-1.amazonaws.com");
 }}}
 
 == Create EC2 Instances ==
 Params :
 {{{
  ImageId : ami-47cefa33
  MinCount : 2
  MaxCount : 2
  SecurityGroups : tomcat
  KeyName : xebia-france
  InstanceType : T1_MICRO
  UserData : buildCloudInitUserData Method
 }}}
 
 {{{
    RunInstancesRequest runInstanceRequest = new RunInstancesRequest() //
    	.with...
    RunInstancesResult runInstances = ec2.runInstances(runInstanceRequest);
 }}}
 
= Create a Load Balancer =
  == Use ELB Client ==
 Use the West Europe End Point.
 {{{
 private AmazonElasticLoadBalancing elb;
 ec2 = new AmazonEC2Client(credentials);
 elb.setEndpoint("elasticloadbalancing.eu-west-1.amazonaws.com");
 }}}
 
 == Create Elastic Load Balancer ==
 {{{
        List<Instance> ec2Instances = displayInstancesDetails(trigram);

        String expectedAvailabilityZones = ec2Instances.get(0).getPlacement().getAvailabilityZone();
        Listener expectedListener = new Listener("HTTP", 80, 8080);

        CreateLoadBalancerRequest createLoadBalancerRequest = new CreateLoadBalancerRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withAvailabilityZones(expectedAvailabilityZones) //
                .withListeners(expectedListener);
        
        elb.createLoadBalancer(createLoadBalancerRequest);
        
        // AVAILABILITY ZONES
        elb.enableAvailabilityZonesForLoadBalancer(new EnableAvailabilityZonesForLoadBalancerRequest(loadBalancerName, //
                                                                            Lists.newArrayList(expectedAvailabilityZones)));
        
        // HEALTH CHECK
        String healthCheckUri = "/petclinic/healthcheck.jsp";
        createElasticLoadBalancerHealthCheck(loadBalancerName, healthCheckUri);
        
        // COOKIE STICKINESS
        final LBCookieStickinessPolicy expectedLbCookieStickinessPolicy = new LBCookieStickinessPolicy( //
                "petclinic" + "-stickiness-policy", null);
        createElasticLoadBalancerCookieStickiness(loadBalancerName, expectedLbCookieStickinessPolicy);
        
        // POLICY
        createElasticLoadBalancerPolicy(loadBalancerName, expectedListener, expectedLbCookieStickinessPolicy);
        
        // EC2 INSTANCES
        List<com.amazonaws.services.elasticloadbalancing.model.Instance> elbInstances = //
                                                    new ArrayList<com.amazonaws.services.elasticloadbalancing.model.Instance>();
        elbInstances.add(new com.amazonaws.services.elasticloadbalancing.model.Instance(ec2Instances.get(0).getInstanceId()));
        elbInstances.add(new com.amazonaws.services.elasticloadbalancing.model.Instance(ec2Instances.get(1).getInstanceId()));

        elb.registerInstancesWithLoadBalancer(new RegisterInstancesWithLoadBalancerRequest( //
                loadBalancerName, //
                elbInstances));
 }}}
 
 == Configure !HealthCheck ==
 {{{
        HealthCheck expectedHealthCheck = new HealthCheck() //
                .withTarget("HTTP:8080" + healthCheckUri) //
                .withHealthyThreshold(2) //
                .withUnhealthyThreshold(2) //
                .withInterval(30) //
                .withTimeout(2);

        elb.configureHealthCheck(new ConfigureHealthCheckRequest(loadBalancerName, expectedHealthCheck));
 }}}
 
 == Cookie Stickiness ==
 {{{
        CreateLBCookieStickinessPolicyRequest createLbCookieStickinessPolicy = new CreateLBCookieStickinessPolicyRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withPolicyName(expectedLbCookieStickinessPolicy.getPolicyName()) //
                .withCookieExpirationPeriod(expectedLbCookieStickinessPolicy.getCookieExpirationPeriod());
        
        elb.createLBCookieStickinessPolicy(createLbCookieStickinessPolicy);
 }}}
 
 == Load Balancer Policy ==
 {{{
       SetLoadBalancerPoliciesOfListenerRequest setLoadBalancerPoliciesOfListenerRequest = new SetLoadBalancerPoliciesOfListenerRequest() //
                .withLoadBalancerName(loadBalancerName) //
                .withLoadBalancerPort(expectedListener.getLoadBalancerPort()) //
                .withPolicyNames(expectedLbCookieStickinessPolicy.getPolicyName());
        
        elb.setLoadBalancerPoliciesOfListener(setLoadBalancerPoliciesOfListenerRequest);
 }}}
 
 