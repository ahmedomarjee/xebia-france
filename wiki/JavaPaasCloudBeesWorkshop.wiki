#summary Discover Java PaaS Cloud with CloudBees

<wiki:toc max_depth="2" />

<br/>
----
<br/>

= Goal of the lab =

 * The purpose of this workshop is to use the !CloudBees platform. !CloudBees is both a development platform and a production platform.

 * Our goal is to make some changes to the famous petclinic application then deploy it on a !CloudBees production cluster.

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/workshop_overview.png" height="450" />
</p>

= Workshop requirements =

 * Git client: !GitHub has [http://help.github.com/set-up-git-redirect setup tutorials] for all platforms (just perform the "Download and Install Git" step, we'll set up the SSH key at the beginning of the lab).

 * [http://maven.apache.org Apache Maven] (version 2.2.1 or above).

 * SSH client (should already be installed on any Unix platform, will come with Git for Windows).

<br/>
----
<br/>

= Workshop Steps =

== @DEV ==

=== Configure GIT repository ===

 * Backup your existing {{{~/.ssh}}} folder and install the workshop's SSH private key ([https://s3-eu-west-1.amazonaws.com/xebia-cloudbees-workshop/id_rsa id_rsa]):
{{{
$ mv ~/.ssh ~/.ssh.bak
$ mkdir ~/.ssh
$ curl https://s3-eu-west-1.amazonaws.com/xebia-cloudbees-workshop/id_rsa --output ~/.ssh/id_rsa
$ chmod 700 ~/.ssh
$ chmod -R 600 ~/.ssh/*
}}}

 * Unzip the [https://s3-eu-west-1.amazonaws.com/xebia-cloudbees-workshop/petclinic.zip petclinic.zip] application under {{{~/petclinic}}}:
{{{
$ curl https://s3-eu-west-1.amazonaws.com/xebia-cloudbees-workshop/petclinic.zip --output /tmp/petclinic.zip
$ unzip /tmp/petclinic.zip -d ~/
$ cd ~/petclinic
}}}

 * Modify the *groupId* in the Maven POM file (replace 'XX' by your team number, e.g. '01'):
{{{
<groupId>fr.xebia.techevent.labXX</groupId>
}}}

 * Initialize a new Git local repository:
{{{
$ git init
$ git remote add origin ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
$ git add -A
$ git commit -am 'Initial checkin - all files'
$ git push origin master
}}}

 * Create an integration branch named "develop":
{{{
$ git branch develop
$ git checkout develop
$ git push origin develop
}}}

 * Verify your branch organization by using the command "git-branch", and check if everything is correct:
{{{
$ git branch -a
  * develop
  master
  remotes/origin/develop
  remotes/origin/master
}}}

=== Create a Jenkins job for Continuous Integration ===

 * Log in to [https://grandcentral.cloudbees.com/ CloudBees] (_your credentials will be provided at the beginning of the lab_).


 * Click on the *Jenkins build* icon.
  <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-build-icon.png" />


 * Go to the view corresponding to your group name *"labXX"*.

 * Create a new job from the left menu with the job name *"1-labXX-DEV"* and tick "Build a Maven2/3 project".

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/add-jenkins-job.png" height="400" />
</p>

 ** On the *"Code source management"* part choose *"Git"* and fill these parameters:
  *** URL of repository: {{{ssh://git@git.cloudbees.com/atelier-xebia/labXX.git}}}
  *** Branch Specifier (blank for default): {{{develop}}}
<p align="center">
   <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-job-configuration-git.png" />
</p>

 ** On the *"Build triggers"* part, tick *"poll SCM"* and provide this CRON expression (which means "every minute"):
{{{
* * * * *
}}}
<p align="center">
   <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-job-configuration-build-trigger.png" />
</p>

 ** On the *"Build"* part, choose Maven Version 3.0.3 and indicate the Maven goal:
{{{
clean package
}}}
<p align="center">
   <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-job-configuration-build.png" height="150" />
</p>
 ** On the *"Post build action"* part, 
  *** tick *"Deploy artifacts to my Private !CloudBees Repository"* option and verify that SNAPSHOT repository is correctly selected,
  *** tick *Sonar* option to active sonar analysis of your project and set Branch to "labXX" to differentiate petclinic projetcs in sonar.
<p align="center">
   <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-job-configuration-post-build-actions.png" />
</p>
 ** Save the configuration and run the job (it can take some minutes before the build begins).

 ** The build will be unstable due to a test failure:

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/ci-job-failed.png" height="350" />
</p>

=== Fix the build and check the Continuous Integration ===

 ** Open the *!OwnerTests* class and fix the test failure.
{{{
fido.setName("Rex"); // should be "Fido"!
}}}

 ** Push your modification on the remote repository:
{{{
$ git commit -am "Fix the test failure ;-)"
$ git push origin develop
}}}

 ** The Continuous Integration job should be run automatically.

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/ci-job-fixed.png" height="350" />
</p>

 ** Once the build is fixed, go back to the job page. Click on the *Sonar* link to have a look at your quality metrics.
   <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/jenkins-job-sonar-icon.png" />


<br/>
----
<br/>

== @INTEG ==

=== Create and configure a new MySQL database ===
 * Go to the [https://run.cloudbees.com/a/atelier-xebia#db-manage services/database screen] from your !CloudBees account home screen
 * Click on the "add new database" link. Fill with the following parameters :
{{{
Database name: labXX-integ
Username: labXX-integ
Password: labXX-integ
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-database-mysql-integ.png" height="350" />
</p>

=== Configure a new application ===

 * On the left-hand side menu, click on *Applications / Add New application*.

 * Create and configure a new application on *RUN@cloud* called "atelier-xebia/labXX-integ"

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-app-integ.png" height="300" />
</p>
 
=== Create a Jenkins job for deploying application on Integration environment ===

 * Create a new Job from the left menu with the job name *"2-labXX-INTEG"* and tick "Build a Maven2/3 project"

 * On the "Code source management" part, choose "Git" and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=develop
}}}

 * On the *"Build triggers"* part, tick *"Build after other projects are built"* and indicate your Continuous Integration job
{{{
Project names: 1-labXX-DEV
}}}

 * On the "Build" part, choose Maven Version 3.0.3 and indicate the Maven goal
{{{
clean package
}}}

 * On the "Post build action" part, tick *"Deploy to !CloudBees"* option and fill parameters:
{{{
Application Id=atelier-xebia/labXX-integ
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-deploy-jenkins-job.png" height="300" />
</p>

=== Configure your application for Integration environment ===

 * The sources provided for the lab are already configured for MySQL. The only thing you need to do is adapt your database info. Go to the *src/main/resources/environment/integ/* directory and edit the *cloudbees.properties* file according to your team number (this file is used to filter *src/main/webapp/WEB-INF/cloudbees-web.xml* during the build):
{{{
cloudbees.datasource.username=labXX-integ
cloudbees.datasource.password=labXX-labXX-integ
cloudbees.datasource.url=jdbc:cloudbees://labXX-integ
}}}

 * Commit and push your changes:
{{{
$ git commit -am "Configure integration database"
$ git push origin develop
}}}

 * The Continuous Integration job should be run automatically. Then, the new Integration job should be executed.

 * Once the job is finished, your application is available at this URL:
{{{
http://labXX-integ.atelier-xebia.cloudbees.net
}}}

 * Also, the !CloudBees website provides a management page for the application (click on *Applications* from the home page, then locate your instance in the list and click on it).

<br/>
----
<br/>

== @TEST ==

=== Run Selenium tests from the cloud ===

 * Your project's *pom.xml* contains a preconfigure _selenium_ profile. Customize it to run the tests against your instance, by adapting the _myselenium.target.host_ property:
{{{
<profile>
 <id>selenium</id>
 <properties>
  <myselenium.target.host>http://labXX-integ.atelier-xebia.cloudbees.net</myselenium.target.host>
 </properties>
 ...
 }}}

 * The actual Selenium test classes are in the _src/test/java/org/.../selenium_ package.
 
 * Modify Selenium test src/test/java/org/springframework/samples/petclinic/selenium/!SeleniumSauceLabSetUp.java and change LabXX by your Lab's number

 * To run the Selenium tests against your defined target
{{{
mvn clean verify -Pselenium
}}}
 
 * Go to Sauce Labs by clicking [https://grandcentral.cloudbees.com/services/goto/sauce_labs Service/Saucelabs] 
<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/saucelab-accueil.png" height="350" />
</p>
 * You can see that your tests was logged by clicking on [https://saucelabs.com/jobs OnDemand/My Jobs] 
<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/saucelab-tests.png" height="200" />
</p>

=== Configure a new job for Selenium tests ===

 * Create a new Job from the left menu with the job name *"3-labXX-TEST"* and tick "Build a Maven2/3 project".

 * On the "Code source management" part, choose "Git" and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=develop
}}}

 * On the *"Build triggers"* part, tick *"Build after other projects are built"* and indicate your Integration deployment job:
{{{
Project names: 2-labXX-INTEG
}}}

 * On the "Build" part, choose Maven Version 3.0.3 and indicate the Maven goal, then save :
{{{
clean verify -Pselenium
}}}

 * Commit and push your changes (!SeleniumSauceLabSetUp.java) and wait for your selenium's test running :
{{{
$ git commit -am "Selenium test"
$ git push origin develop
}}}

 * You can do a lot more with Sauce Labs with Scout, !OnDemand and Connect. More info at https://saucelabs.com/account

<br/>
----
<br/>

== @RUN ==

=== Configure a new MySQL database ===

 * Go back to the Home page in !CloudBees and click on *Applications*.

 * *Create* a new MySQL database by clicking on the databases icon in the home page of the Cloudbees account. Then click on the add new database link. Fill with the following parameters :
{{{
Database name: labXX
Username: labXX
Password: labXX
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-database-mysql.png" height="350" />
</p>

=== Configure a new application with Elasticity, monitoring with New Relic and logs with Papertrail ===

 * On the left-hand side menu, click on *Applications / Add New application*.

 * *Create* a new application on *RUN@cloud* called "atelier-xebia/labXX".

 * Click on the "Configure" link under your application, and then on the "Configuration" tab.

 * Under "Redundancy and Scale", select "Multiple Instances".

 * Tick "Enable New Relic RPM application monitoring" and "Enable Papertrail application logging".

 * Click on the "Save Changes" button at the top of the page.
<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/app-configuration.png" height="550" />
</p>

=== Configure your application for Production environment ===

 * The sources provided for the lab are already configured for MySQL. The only thing you need to do is adapt your database info. Edit *src/main/resources/environment/prod/cloudbees.properties* (this file is used to filter *src/main/webapp/WEB-INF/cloudbees-web.xml* during the build):
{{{
cloudbees.datasource.username=labXX
cloudbees.datasource.password=labXX
cloudbees.datasource.url=jdbc:cloudbees://labXX
}}}

 * Commit and push your changes:
{{{
$ git commit -am "Configure production database"
$ git push origin develop
}}}

=== Create a Jenkins job for deploying application on Production environment ===

 * Create a new Job from the left menu with the job name *"4-labXX-RUN"* and tick "Build a Maven2/3 project"

 * On the "Code source management" part choose "Git" and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=master
}}}

 ** On the *"Build triggers"* part, tick *"poll SCM"* and provide this CRON expression:
{{{
* * * * *
}}}

 * On the "Build" part, choose Maven Version 3.0.3 and indicate the Maven goal
{{{
clean package -Denvironment=prod
}}}

 * On the "Post build action" part tick *"Deploy to !CloudBees"* option and fill parameters. If the application Id doesn't exist, it will be created.
{{{
Application Id=atelier-xebia/labXX
}}}

 * Save the configuration.

=== Branch promotion with Git ===

 * Merge your *"develop"* branch to your *"master"* branch:
{{{
$ git checkout master
$ git merge develop --no-ff
$ git push origin master
}}}

 * The Production deployment job should be run automatically.

 * Once the job is finished, your application is available at this URL:
{{{
http://labXX.atelier-xebia.cloudbees.net
}}}

<br/>
----
<br/>

== @PERF ==

=== Stress test with JMeter === 

 * Open the *pom.xml* file and edit *performance* profile to run [https://github.com/Ronnie76er/jmeter-maven-plugin/wiki jmeter-maven-plugin]
{{{
<profile>
  <id>performance</id>
  <properties>
    <hostAddress>labXX.atelier-xebia.cloudbees.net</hostAddress>
    <hostPort>80</hostPort>
    <nbVirtualUsers>5</nbVirtualUsers>
    <nbLoopsCount>2</nbLoopsCount>
    <nbRampUp>5</nbRampUp>
  </properties>
  ...
</profile>
}}}

 * Commit and push your changes:
{{{
$ git commit -am "Configure stress tests"
$ git push origin master
}}}

 * Create a new Job from the left menu with the job name *"5-labXX-PERF"* and tick *"Build a Maven2/3 project"*.

 * On the *"Code source management"* part, choose *"Git"* and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=master
}}}

 * Add the following Maven goals:
{{{
clean integration-test -Pperformance
}}}

 * In Post-build Actions, check *"Publish Performance test result report"*:

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-performance-test-job-jenkins.png" height="200" />
</p>
 
 * Run the job manually.
 
 * Once complete, the reports can be accessed through the *"Performance Trend"* link on the job page:

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/performance-jenkins-jmeter.png" height="250" />
</p>

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/performance-jenkins-jmeter-trend.png" height="300" />
</p>
 
=== Monitoring with New Relic ===

 * Click on the services link in the top bar.

 * Click on the *"New Relic"* icon. You can read a brief [http://wiki.cloudbees.com/bin/view/RUN/NewRelic presentation] in the wiki.

 * Verify elasticity by checking how many servers are running

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/newrelic-performance.png" height="600" />
</p>

<br/>
----
<br/>

== @SDK ==

=== Installing the SDK ===

 * The SDK provides command-line tools to manage applications and databases.

 * On your !CloudBees home page, click on the *!CloudBees SDK* link in the *Downloads* section. Follow the installation instructions for your platform.

=== Getting information ==

 * List the applications available to the workshop's account:
{{{
$ bees app:list
}}}

 * You should see your production application (as well as those of the other teams):
{{{
Application                Status    URL                                    Instance(s)
...
atelier-xebia/labXX        active    labXX.atelier-xebia.cloudbees.net      1
}}}

 * To get more information, try the following command:
{{{
$ bees app:info -a atelier-xebia/labXX
}}}

=== Tailing the logs ===

 * Should you get nostalgic of the good old Unix *tail* command, the SDK provides a way to follow your logs in real-time from the command line:
{{{
$ bees app:tail -a atelier-xebia/labXX
}}}

 * Go back to the application in your browser and navigate through a few pages; the console logs should get updated.

=== Creating and deploying a new application ===

 * In this section, we'll bootstrap an application from a !CloudBees-provided template, and deploy it to the cloud from the command-line.

 * Run the following command (the new application's root directory will be created in the current directory):
{{{
$ cd ~/my_projects
$ bees create -a atelier-xebia/helloworldXX -p fr.xebia helloworldXX
}}}

 * Navigate to the newly created directory and examine the application structure. Edit *webapp/index.jsp* and locate for this text:
{{{
<h2 class="color text-xl">This application under development</h2>
}}}

 * Replace it with something more personal:
{{{
<h2 class="color text-xl">Team XX says: hello, world!</h2>
}}}

 * Launch your application locally by running this command from your root directory (NB: if port 8080 is already used on your machine, specify another with the *-p* option):
{{{
$ bees run
}}}

 * Navigate to http://localhost:8080 to view the home page with your personal message.

 * Now let's deploy the application to the cloud! Kill your local server and run the following command (again from the application's root directory):
{{{
$ bees deploy -a atelier-xebia/helloworldXX
}}}

 * In the !CloudBees web administration console, go to the applications management page. Your new app should be available.
