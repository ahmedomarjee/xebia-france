#summary Discover Java PaaS Cloud with CloudBees

<wiki:toc max_depth="2" />
<br/>
----
<br/>
= Goal of the lab =

 * The purpose of this workshop is to use Cloudbees platform. Cloudbees is both a development platform and a production platform.
 * Our goal is to make some changes to the famous petclinic application then deploy it on cloudbees production cluster.

= Workshop requirements =

 * Git client: !GitHub has [http://help.github.com/set-up-git-redirect setup tutorials] for all platforms (just perform the "Download and Install Git" step, we'll set up the SSH key at the beginning of the lab).
 * [http://maven.apache.org Apache Maven] (version 2.2.1 or above).
 * SSH client (should already be installed on any Unix platform, will come with Git for Windows).
 * SSH private key (will be sent by email before the lab).

<br/>
----
<br/>

= Workshop Steps =

== @DEV ==

=== Configure GIT repository ===

 * Create an *".ssh"* folder. If you already have one, the easiest solution is to back it up and restore it after the lab:
{{{
$ mv $HOME/.ssh $HOME/.ssh.bak
$ mkdir $HOME/.ssh
}}}

 * Move your SSH private key to the folder and update the permissions:
{{{
$ mv id_rsa $HOME/.ssh
$ chmod -R 700 $HOME/.ssh
}}}

 * Get [http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/petclinic-cloudbees.zip the zip] file containing the petclinic application from the wiki and unzip it in your local workspace

 * Modify the *Group ID* in the Maven POM file (replace 'XX' by your team number, e.g. '01')
{{{
<groupId>fr.xebia.techevent.labXX</groupId>
}}}

 * Also modify the SCM configuration according to your team number
{{{
<scm>
	<connection>scm:git:ssh://git@git.cloudbees.com/atelier-xebia/labXX.git</connection>
	<developerConnection>scm:git:ssh://git@git.cloudbees.com/atelier-xebia/labXX.git</developerConnection>
</scm>
}}}

 * Initialize a new Git local repository:
{{{
$ cd petclinic # or your existing project directory
$ git init
$ git remote add origin ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
$ git add -A  # if you want to check everything in
$ git commit -m 'Initial checkin'
$ git push origin master
}}}

=== Build your project for Continuous Integration ===

 * Log in to !CloudBees (_your credentials will be provided at the beginning of the lab_).
 
 * Click on the *Jenkins build* icon.
 
 * Create a new folder with your group name *"labXX"* 
 
 * Create a new item from the left menu with the job name *"labXX-ci"* and tick "Build a Maven2/3 project"
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/add-jenkins-job.png" height="400" />
 
 ** On the *"Code source management"* part choose *"Git"* and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=** # For avoiding issue
}}}
 
 ** On the *"Build triggers"* part tick *"poll SCM"* by filling the CRON expression
{{{
* * * * * # every minute
}}}
 
 ** On the *"Build"* part indicate the Maven goal
{{{
clean package
}}}
 
 ** On the *"Build Environment"* part, tick *"Maven release build"* option. The parameters are correctly pre-filled, let them as default.
 
 ** On the *"Post build action"* part tick *"Deploy artifacts to my Private !CloudBees Repository"* option and verify that SNAPSHOT repository is correctly selected. Also tick *Sonar* option to active sonar analyze of your project.
 
 ** Save the configuration and run the job (it can take some minutes before the build begins).

=== Release of a new version ===

 * Release of a new version of the application by clicking on the "Perform maven release". Let the parameter as pre-filled and click on "Schedule a maven release". As the build, the release can start after a few minutes. (WARNING ! Add scm url to petclinic pom.xml !)

 * Use Artifactory for managing Maven repository (jenkins artifactory plugin is buggy? problem with artifactory host configuration) 

<br/>
----
<br/>

== @TEST ==

 ===Run a selenium test from your IDE===
 * Open your IDE 
 * Create a new Java project
 * Download http://selenium.googlecode.com/files/selenium-java-2.9.0.zip
 * Add selenium-java-x.x.x.jar and everything in lib/ from your extracted zip to your project's classpath/build path
 * Copy code from this gist https://gist.github.com/1299474
 * Choose a specific name for your test suite specific to your team and add it to the second argument line 32. For example:
 {{{
 capabillities.setCapability("name", "Bob and John selenium test");
 }}}
 * Save and run the unit test
 * The test should now appear in your http://saucelabs.com/jobs	

 ===Run petclinic application on Integration platform===
 * Go back to the Home page in !CloudBees and click on *Applications*
 * Create and configure a new application on *RUN@cloud* called "xebia-atelier/labXX-integ"
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-app-integ.png" height="300" />
 
 ===Deploy application on integration environment (HSQLDB)===
 * Create a new Job from the left menu with the job name *"labXX-integ"* and tick "Build a Maven2/3 project"
 * On the "Code source management" part choose "Git" and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=** # For avoiding issue
}}}
 * On the "Build" part indicate the Maven goal
{{{
clean package
}}}
 * On the "Post build action" part tick *"Deploy to !CloudBees"* option and fill parameters:
{{{
Application Id=atelier-xebia/labXX-integ
}}}
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-deploy-jenkins-job.png" height="300" />

 * Save the configuration and run the job.
 
<br/>
----
<br/>

== @OPS ==

=== Run production application on MySQL ===

 * Go back to the Home page in !CloudBees and click on *Applications*
 
 * Create and configure a new MySQL database by clicking on the databases icon in the home page of the Cloudbees account. Then click on the add new database link. Fill with the following parameters :
{{{
database name: labXX
username: labXX
password: labXX
}}}
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-database-mysql.png" height="350" />
 
=== Configure application for using MySQL ===
 
 * Open and modify *web.xml* file inside *src/main/prod/WEB-INF* directory
{{{
<!--
	- Reference to PetClinic database.
	- Only needed if not using a local DataSource but a JNDI one instead.
-->
<resource-ref>
	<res-ref-name>jdbc/labXX</res-ref-name>
	<res-type>javax.sql.DataSource</res-type>
 	<res-auth>Container</res-auth>
</resource-ref>
}}}
 
 * Open and modify *cloudbees-web.xml* file inside *src/main/prod/WEB-INF* directory
{{{
<!-- Application ID (formatted CB_ACCOUNT/APPNAME) -->
<appid>atelier-xebia/labXX-prod</appid>

<!-- DataSources (use names refererenced via <resource-ref> in WEB-INF/web.xml) -->
<resource name="jdbc/labXX" auth="Container" type="javax.sql.DataSource">
	<param name="username" value="labXX" />
	<param name="password" value="labXX" />
	<param name="url" value="jdbc:cloudbees://labXX" />
</resource>
}}}

 * Open and modify *applicationContext-dataSource.xml* file inside *src/main/prod/WEB-INF/spring* directory
{{{
<!-- JNDI DataSource for JEE environments -->
<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/lab00"/>
}}}

=== Deploy application on production environment ===
 
 * Create a new Job from the left menu with the job name *"labXX-prod"* and tick "Build a Maven2/3 project"

 * On the "Code source management" part choose "Git" and fill these parameters:
{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=** # For avoiding issue
}}}

 * On the "Build" part indicate the Maven goal
{{{
clean package -P prod
}}}

 * On the "Post build action" part tick *"Deploy to !CloudBees"* option and fill parameters. If the application Id doesn't exist, it will be created.
{{{
Application Id=atelier-xebia/labXX-prod
}}}

 * Save the configuration and run the job.
 
=== Configure production application with Elasticity, monitoring with New Relic and logs with Papertrail ===

 * Click on the applications icon on the home of the !Cloudbees account.
 * Click on the "configure" link under your application.
 * On the "Redundancy and Scale", choose "Multiple Instances" option.
 * Tick "Enable New Relic RPM application monitoring" and "Enable Papertrail application logging"

<br/>
----
<br/>

== @PERF ==

 ===Stress test with JMeter===
 
 * Edit pom.xml
 * Add [https://github.com/Ronnie76er/jmeter-maven-plugin/wiki|jmeter-maven-plugin repository]
{{{
<pluginRepositories>
  <pluginRepository>
    <id>jmeter-maven-plugin</id>
    <name>Maven JMeter Plugin</name>
    <url>http://yciabaud.github.com/jmeter-maven-plugin/repository</url>
  </pluginRepository>
</pluginRepositories>
}}}
 * Add jmeter-maven-plugin in the build plugin section
{{{
<build>
  ...
  <plugins>
    ...
  	<plugin>
  	  <groupId>org.apache.jmeter</groupId>
  	  <artifactId>maven-jmeter-plugin</artifactId>
  	  <version>1.2</version>
  	  <executions>
  	    <execution>
  		  <id>jmeter-tests</id>
  		  <phase>integration-test</phase>
  		  <goals>
  		    <goal>jmeter</goal>
  	      </goals>
  	    </execution>
  	  </executions>
  	  <configuration>
  	    <reportDir>
  		  ${project.build.directory}/jmeter-reports
  	    </reportDir>
  		<jmeterUserProperties>
  		  <hostAddress>${hostAddress}</hostAddress>
  		  <hostPort>${hostPort}</hostPort>
  		  <nbVirtualUsers>${nbVirtualUsers}</nbVirtualUsers>
  		  <nbLoopsCount>${nbLoopsCount}</nbLoopsCount>
  		  <nbRampUp>${nbRampUp}</nbRampUp>
  		</jmeterUserProperties>
  	  </configuration>
  	</plugin>
  </plugins>
</build>
}}}

 * Create folder src/test/jmeter and put [http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/petclinic-cloudbees.jmx|petclinic-cloudbees.jmx]
 * Create a job jenkins and add maven goals
{{{
clean integration-test -DhostAddress=***.atelier-xebia.cloudbees.net -DhostPort=80 -DnbVirtualUsers=600 -DnbLoopsCount=2 -DnbRampUp=60
}}}
 * Configure Post-build Actions and check Publish Performance test result report
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-performance-test-job-jenkins.png" height="350" />

  
 ===Monitoring with New Relic===
 ** Click on the services link.
 ** Click on the "New Relic" icon.
 * Verify elasticity (to check with Nicolas?)
<br/>
----
<br/>

== @ADMIN ==

 * Manage user, group
 ** Go to the Account tab
 ** Access to your User Settings and paste the SSH public key you have received by e-mail
 <img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/add-ssh-public-key.png" height="400" />
 
 * Using of CloudBees SDK
 * Configure SSH Key

<br/>
----
<br/>

= Questions =

 * Can we use CloudBees SDK for managing my account (User, subscription administration)?
 * Can we launch a Selenium test on SauceLabs directly from a job configured inside Jenkins?
 * Can we create a stress test by using JMeter for showing the elasticity of an application which is running on CloudBees?
 * Can we browse Git repository directly from CloudBees?
 * Why when I create a new Jenkins job for an existing project, Jenkins downloads all the dependencies even if I have already all of them into my Maven repository?
 * What is the meaning of the option "Build when a change is pushed to CloudBees Forge" in Jenkins job configuration?
 * How can I remove artifact from my Maven repository?
