#summary Discover Java PaaS Cloud with CloudBees

<wiki:toc max_depth="2" />

<br/>
----
<br/>

= Goal of the lab =

 * The purpose of this workshop is to use Cloudbees platform. Cloudbees is both a development platform and a production platform.
 
 * Our goal is to make some changes to the famous petclinic application then deploy it on cloudbees production cluster.

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/workshop_overview.png" height="450" />
</p>

= Workshop requirements =

 * Git client: !GitHub has [http://help.github.com/set-up-git-redirect setup tutorials] for all platforms (just perform the "Download and Install Git" step, we'll set up the SSH key at the beginning of the lab).
 
 * [http://maven.apache.org Apache Maven] (version 2.2.1 or above).
 
 * SSH client (should already be installed on any Unix platform, will come with Git for Windows).
 
 * SSH private key (will be sent by email before the lab).

<br/>
----
<br/>

= Workshop Steps =

== @DEV ==

=== Configure GIT repository ===

 * Create an *".ssh"* folder in your home directory. If you already have one, it's probably easiest to back it up and restore it after the lab:

{{{
$ mv $HOME/.ssh $HOME/.ssh.bak
$ mkdir $HOME/.ssh
}}}

 * Move your SSH private key to the folder and update the permissions:

{{{
$ mv id_rsa $HOME/.ssh
$ chmod -R 700 $HOME/.ssh
}}}

 * Get [http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/petclinic-cloudbees.zip the zip] file containing the petclinic application from the wiki and unzip it in your local workspace.

 * Modify the *Group ID* in the Maven POM file (replace 'XX' by your team number, e.g. '01'):

{{{
<groupId>fr.xebia.techevent.labXX</groupId>
}}}

 * Initialize a new Git local repository:

{{{
$ cd petclinic # or your existing project directory
$ git init
$ git remote add origin ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
$ git add -A  # if you want to check everything in
$ git commit -m 'Initial checkin'
$ git push origin master
}}}

 * Create an integration branch named "develop":

{{{
$ git branch develop
$ git checkout develop
$ git push origin develop
}}}

 * Verify your branch organization by using the command "git-branch", and check if everything is correct:

{{{
$ git branch -a
  * develop
  master
  remotes/origin/develop
  remotes/origin/master
}}}

 * To avoid having to specify the 'master' branch for future pushes, you can add the following at the end of your *.git/config* file:

{{{
[branch "master"]
  remote = origin
  merge = refs/head/master
}}}

=== Create a Jenkins job for Continuous Integration ===

 * Log in to !CloudBees (_your credentials will be provided at the beginning of the lab_).
 
 * Click on the *Jenkins build* icon.
 
 * Go to the folder with your group name *"labXX"*.
 
 * Create a new item from the left menu with the job name *"1-labXX-DEV"* and tick "Build a Maven2/3 project".

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/add-jenkins-job.png" height="400" />
</p>
 
 ** On the *"Code source management"* part choose *"Git"* and fill these parameters:

{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=develop
}}}
 
 ** On the *"Build triggers"* part, tick *"poll SCM"* and provide this CRON expression (which means "every minute"):

{{{
* * * * *
}}}
 
 ** On the *"Build"* part indicate the Maven goal:

{{{
clean package
}}}
 
 ** On the *"Post build action"* part, tick *"Deploy artifacts to my Private !CloudBees Repository"* option and verify that SNAPSHOT repository is correctly selected. Also tick *Sonar* option to active sonar analyze of your project.
 
 ** Save the configuration and run the job (it can take some minutes before the build begins).
 
 ** The build must be unstable due to a test failure:

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/ci-job-failed.png" height="350" />
</p>

=== Fix the build and check the Continuous Integration ===

 ** Open the *!OwnerTests* class and fix the test failure.

{{{
fido.setName("Rex"); // should be "Fido"!
}}}

 ** Push your modification on the remote repository:

{{{
$ git commit -am "Fix the test failure ;-)"
$ git push
}}}

 ** The Continuous Integration job should be run automatically.

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/ci-job-fixed.png" height="350" />
</p>

 ** Once the build is fixed, go back to the job page. Click on the *Sonar* link to have a look at your quality metrics.

<br/>
----
<br/>

== @INTEG ==

=== Configure a new MySQL database ===

 * Go back to the Home page in !CloudBees and click on *Applications*
 
 * Create and configure a new MySQL database by clicking on the databases icon in the home page of the Cloudbees account. Then click on the add new database link. Fill with the following parameters :

{{{
Database name: labXX-dev
Username: labXX-dev
Password: labXX
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-database-mysql-dev.png" height="350" />
</p>

=== Configure a new application ===

 * Go back to the Home page in !CloudBees and click on *Applications*

 * Create and configure a new application on *RUN@cloud* called "xebia-atelier/labXX-integ"

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-app-integ.png" height="300" />
</p>
 
=== Create a Jenkins job for deploying application on Integration environment ===

 * Create a new Job from the left menu with the job name *"2-labXX-INTEG"* and tick "Build a Maven2/3 project"
 
 * On the "Code source management" part choose "Git" and fill these parameters:

{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=develop
}}}

 * On the *"Build triggers"* part, tick *"Construire ˆ la suite d'autres projets (projets en amont)"* and indicate your Continuous Integration job

{{{
Noms des projets: 1-labXX-DEV
}}}

 * On the "Build" part indicate the Maven goal

{{{
clean package
}}}

 * On the "Post build action" part tick *"Deploy to !CloudBees"* option and fill parameters:

{{{
Application Id=atelier-xebia/labXX-integ
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-deploy-jenkins-job.png" height="300" />
</p>

=== Configure application for using MySQL ===

 * The sources provided for the lab are already configured for MySQL. The only thing you need to do is adapt your database info. Go to the *src/main/resources/environment/dev/* directory and edit the *cloudbees.properties* file according to your team number (this file is used to filter *src/main/webapp/WEB-INF/cloudbees-web.xml* during the build):

{{{
cloudbees.datasource.username=labXX-dev
cloudbees.datasource.password=labXX
cloudbees.datasource.url=jdbc:cloudbees://labXX-dev
}}}

 * Commit and push your changes:

{{{
$ git commit -am "Configure integration database"
$ git push
}}}

 * The Continuous Integration job should be run automatically. Then, the new Integration job should be executed.
 
 * One the job finished, you can access to your application through this URL:

{{{
http://labXX-integ.atelier-xebia.cloudbees.net
}}}

<br/>
----
<br/>

== @TEST ==

=== Run Selenium tests from the cloud ===

 * Update your pom.xml with this selenium profile. Replace the property _selenium.target.host_ with the home page of the you want to launch Selenium tests against. (ex: your integration environment for instance)

{{{
<profile>
	<id>selenium</id>
	<build>
	<plugins>
	  <plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-failsafe-plugin</artifactId>
		<version>2.10</version>
		<executions>
			<execution>
				<id>selenium-verify</id>
				<phase>verify</phase>
				<goals>
					<goal>integration-test</goal>
					<goal>verify</goal>
				</goals>
			</execution>
		</executions>
		<configuration>
		  <includes>
			<include>**/*Selenium.java</include>
		  </includes>
		  <systemProperties>
			  <selenium.target.host>(REPLACE WITH YOUR INTEGRATION HOME PAGE URL)</selenium.target.host>
			  <saucelabs.account.url>http://atelier-xebia:ab03b6f6-14b8-4458-b7c7-cc306ba0b8c0@ondemand.saucelabs.com:80/wd/hub</saucelabs.account.url>
		  </systemProperties>
		</configuration>
	  </plugin>
	</plugins>
	</build>
</profile>
}}}
 
 * Update your pom.xml with this dependency

{{{
<dependency>
	<groupId>org.seleniumhq.selenium</groupId>
	<artifactId>selenium-java</artifactId>
	<version>2.0rc3</version>
</dependency>
}}}
 
 * Create a new package _selenium_ in _src/test/java/org/springframework/samples/petclinic/_ and add the 2 following java classes.

{{{
package org.springframework.samples.petclinic.selenium;

import java.net.URL;
import java.util.concurrent.TimeUnit;

import junit.framework.TestCase;

import org.openqa.selenium.Platform;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

public class SeleniumSauceLabSetUp extends TestCase {
    
	protected WebDriver driver;
	protected String targetUrl;
	
	public void setUp() throws Exception {
        DesiredCapabilities capabillities = DesiredCapabilities.firefox();
        capabillities.setCapability("version", "5");
        capabillities.setCapability("platform", Platform.XP);
        capabillities.setCapability("name", "Simple selenium test [" + System.currentTimeMillis() + "].");

        this.driver = new RemoteWebDriver(new URL(System.getProperty("saucelabs.account.url")), capabillities);
        this.targetUrl = System.getProperty("selenium.target.host");
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        
        System.out.println("Running selenium tests against: " + targetUrl);
    }

    public void tearDown() throws Exception {
        this.driver.quit();
    }
}
}}}
 
 * The actual test class
 
{{{
package org.springframework.samples.petclinic.selenium;

public class HomePageSelenium extends SeleniumSauceLabSetUp {

    public void test_home_page_should_have_correct_title() throws Exception {
	    driver.get(targetUrl);
	    assertEquals("PetClinic :: a Spring Framework demonstration", driver.getTitle());
	}
}
}}}
 
 * Run locally the following command to launch your Selenium tests against the target url

{{{
mvn clean verify -Pselenium
}}}
 
 * Or if you want to override the target url for Selenium

{{{
mvn clean verify -Pselenium -Dselenium.target.host={HOME_PAGE_OF_YOUR_CHOICE}
}}}

 * You can see your test was logged at https://saucelabs.com/jobs

=== Configure a new job for Selenium tests ===

 * Create a new Job from the left menu with the job name *"3-labXX-TEST"* and tick "Build a Maven2/3 project"

 * On the *"Build triggers"* part, tick *"Construire ˆ la suite d'autres projets (projets en amont)"* and indicate your Integration deploiement job

{{{
Noms des projets: 2-labXX-INTEG
}}}

*TODO*
 
<br/>
----
<br/>

== @RUN ==

=== Configure a new MySQL database ===

 * Go back to the Home page in !CloudBees and click on *Applications*
 
 * Create and configure a new MySQL database by clicking on the databases icon in the home page of the Cloudbees account. Then click on the add new database link. Fill with the following parameters :

{{{
Database name: labXX
Username: labXX
Password: labXX
}}}

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/create-database-mysql.png" height="350" />
</p>

=== Configure a new application ===

 * The sources provided for the lab are already configured for MySQL. The only thing you need to do is adapt your database info. Edit *src/main/resources/environment/prod/cloudbees-web.properties* (this file is used to filter *src/main/webapp/WEB-INF/cloudbees-web.xml* during the build):

{{{
cloudbees.datasource.username=labXX
cloudbees.datasource.password=labXX
cloudbees.datasource.url=jdbc:cloudbees://labXX
}}}

 * Commit and push your changes:

{{{
$ git commit -am "Configure production database"
$ git push
}}}

=== Deploy application on production environment ===

 * Create a new Job from the left menu with the job name *"4-labXX-RUN"* and tick "Build a Maven2/3 project"

 * On the "Code source management" part choose "Git" and fill these parameters:

{{{
URL of repository=ssh://git@git.cloudbees.com/atelier-xebia/labXX.git
Branch Specifier (blank for default)=master
}}}

 * On the "Build" part indicate the Maven goal

{{{
clean package -Denvironment=prod
}}}

 * On the "Post build action" part tick *"Deploy to !CloudBees"* option and fill parameters. If the application Id doesn't exist, it will be created.

{{{
Application Id=atelier-xebia/labXX
}}}

 * Save the configuration.
 
 * Promote the "develop" branch to the "master" branch with Git:
 
{{{
*TODO*
}}}

 * Once the job has completed, go back to the !CloudBees home page and click on the *Applications* icon. Locate your instance in the list and click on it. The management page provides useful information like usage statistics, access to the production logs, and incidentally the URL of your application :-) Click on it to check that it functions properly.

=== Configure production application with Elasticity, monitoring with New Relic and logs with Papertrail ===

 * Click on the applications icon on the home of the !Cloudbees account.

 * Click on the "configure" link under your application.

 * On the "Redundancy and Scale", choose "Multiple Instances" option.

 * Tick "Enable New Relic RPM application monitoring" and "Enable Papertrail application logging"

<br/>
----
<br/>

== @PERF ==

=== Stress test with JMeter === 

 * Edit pom.xml

 * Add [https://github.com/Ronnie76er/jmeter-maven-plugin/wiki|jmeter-maven-plugin repository]

{{{
<pluginRepositories>
  <pluginRepository>
    <id>jmeter-maven-plugin</id>
    <name>Maven JMeter Plugin</name>
    <url>http://yciabaud.github.com/jmeter-maven-plugin/repository</url>
  </pluginRepository>
</pluginRepositories>
}}}

 * Add jmeter-maven-plugin in the build plugin section

{{{
<build>
  ...
  <plugins>
    ...
  	<plugin>
  	  <groupId>org.apache.jmeter</groupId>
  	  <artifactId>maven-jmeter-plugin</artifactId>
  	  <version>1.2</version>
  	  <executions>
  	    <execution>
  		  <id>jmeter-tests</id>
  		  <phase>integration-test</phase>
  		  <goals>
  		    <goal>jmeter</goal>
  	      </goals>
  	    </execution>
  	  </executions>
  	  <configuration>
  	    <reportDir>
  		  ${project.build.directory}/jmeter-reports
  	    </reportDir>
  		<jmeterUserProperties>
  		  <hostAddress>${hostAddress}</hostAddress>
  		  <hostPort>${hostPort}</hostPort>
  		  <nbVirtualUsers>${nbVirtualUsers}</nbVirtualUsers>
  		  <nbLoopsCount>${nbLoopsCount}</nbLoopsCount>
  		  <nbRampUp>${nbRampUp}</nbRampUp>
  		</jmeterUserProperties>
  	  </configuration>
  	</plugin>
  </plugins>
</build>
}}}

 * Create folder src/test/jmeter and put [http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/petclinic-cloudbees.jmx petclinic-cloudbees.jmx]

 * Create a new Job from the left menu with the job name *"5-labXX-PERF"* and tick "Build a Maven2/3 project"

 * Add teh following Maven goals and replace "XX" by your group number:

{{{
clean integration-test -DhostAddress=labXX.atelier-xebia.cloudbees.net -DhostPort=80 -DnbVirtualUsers=600 -DnbLoopsCount=2 -DnbRampUp=60
}}}

 * Configure Post-build Actions and check Publish Performance test result report

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/configure-performance-test-job-jenkins.png" height="200" />
</p>
 
 * Report page on jenkins can be view by clicking on Performance Trend 

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/performance-jenkins-jmeter.png" height="250" />
</p>

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/performance-jenkins-jmeter-trend.png" height="300" />
</p>
 
=== Monitoring with New Relic ===

 * Click on the services link in the top bar.

 * Click on the "New Relic" icon.

 * Verify elasticity by checking how many servers are running

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/newrelic-performance.png" height="600" />
</p>
 
<br/>
----
<br/>

== @ADMIN ==

 * For managing user and group, go to the Account tab.

 * Access to your User Settings and paste the SSH public key you have received by e-mail

<p align="center">
<img src="http://xebia-france.googlecode.com/svn/wiki/cloudbees-img/add-ssh-public-key.png" height="400" />
</p>
 
 * Using of CloudBees SDK

 * Configure SSH Key
