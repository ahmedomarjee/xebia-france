#summary JMX based extras to ease monitoring.
#labels Featured

= Introduction =

Extras on top of Java SE (e.g. Thread Pool) and Spring Framework (e.g. JMS Listener) to ease monitoring.

= @Profiled Annotation =

See [ProfiledAnnotation] page. Monitor methods invocations via JMX MBeans declaring:
  {{{
public class MyService {

   @Profiled
   public void myOperation(...) {
      ...
   }
}
}}}

= Jakarta Commons DBCP JDBC Data Source Monitoring =

See [ManagedBasicDataSource]. Offer JMX MBean based monitoring and Spring XML namespace based configuration to your [http://commons.apache.org/dbcp/ Jakarta Commons DBCP Data Source] declaring :
   {{{
<beans ...>
   <management:dbcp-datasource id="myDataSource">
      <management:url value="jdbc:h2:mem:dbcp-test" />
      <management:driver-class-name value="org.h2.Driver" />
      <management:username value="sa" />
      <management:password value="" />
      <management:max-active value="10" />
      <!-- ... any other useful configuration param -->
   </management:dbcp-datasource>
   ...
</beans>
}}}

=  Java Util Concurrent Executor Service / Thread Pool Executor Monitoring =

See [ManagedExecutorService]. Declare a fully managed Executor Service with JMX Mbean monitoring declaring:
   {{{
<beans ...>
   <management:executor-service 
       id="my-executor" 
       pool-size="1-10" 
       queue-capacity="5" />
   ...
</beans>
}}}

= JMS Connection Factory Monitoring =

See [ManagedJmsConnectionFactory]. Expose metrics of a JMS ConnectionFactory via a JMX MBean with:
   {{{
<beans ...>
   <!-- wrap 'myConnectionFactory' in a JMX enabled connection factory -->
   <management:jms-connection-factory-wrapper 
      id="connectionFactory" 
      connection-factory="myConnectionFactory" />
   ...
</beans>
}}}

= Spring JMS Caching Connection Factory Monitoring =

See [ManagedCachingConnectionFactory]. Expose your Spring JMS CachingConnectionFactory via a JMX MBean (reset connections via JMX, etc) declaring:

   {{{
<beans ...>
   <!-- wrap 'rawConnectionFactory' in a JMX enabled caching connection factory -->
   <management:jms-caching-connection-factory 
      id="connectionFactory" 
      connection-factory="rawConnectionFactory" />
   ...

</beans>
}}}

= Eh Cache =

Eh Cache already has all the JMX MBeans needed, we just proposed a simplified Spring configuration, a jsp page to watch the statistics and an Hyperic plugin.

 * Spring namespace based configuration :
   {{{
<beans ...
   xmlns:management="http://www.xebia.fr/schema/xebia-management-extras"
   xsi:schemaLocation="...
      http://www.xebia.fr/schema/xebia-management-extras http://www.xebia.fr/schema/management/xebia-management-extras.xsd">
   ...
   <management:eh-cache-management-service mbean-server="mbeanServer" cache-manager="cacheManager" />

</beans>
}}}
 * Spring raw configuration:
  {{{
<beans ...>
   ...
   <bean id="managementService" class="net.sf.ehcache.management.ManagementService" init-method="init" destroy-method="dispose">
      <constructor-arg ref="cacheManager" />
      <constructor-arg ref="mbeanServer" />
      <constructor-arg index="2" value="true" />
      <constructor-arg index="3" value="true" />
      <constructor-arg index="4" value="true" />
      <constructor-arg index="5" value="true" />
   </bean>
</beans>
}}}
 * JSP monitoring page : [http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/main/webapp/jmx/ehcache.jsp ehcache.jsp (source)], <a href="http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/site/monitoring-jsp-ehcache.png" target="screenshot"><img src="http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/site/monitoring-jsp-ehcache.png" height="30"/></a>
 * Hyperic plugin: [http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/main/hyperic/tomcat-extras-ehcache-plugin.xml tomcat-extras-ehcache-plugin.xml] (1)

= Servlet Context Aware MBean Server =

A problem with MBean Servers is that they work at the JVM level and that several web applications may want to register mbeans with the same name. This is typically the case with mbeans exposed by common libraries/frameworks like  EH Cache or CXF.

To ensure that deploying several web applications on the same servlet engine (Tomcat, Websphere, Weblogic, JBoss, etc), we developed a thin MBeanServer wrapper which appends to mbeans names:
 * the web application path,
 * if the servlet container is Tomcat, the web application host,
 * any extra attribute defined by configuration.

 *Spring namespace based configuration:*
   {{{
<beans ...
   xmlns:management="http://www.xebia.fr/schema/xebia-management-extras"
   xsi:schemaLocation="...
      http://www.xebia.fr/schema/xebia-management-extras http://www.xebia.fr/schema/management/xebia-management-extras.xsd">

   <management:servlet-context-aware-mbean-server id="mbeanServer"/>
   <context:mbean-export server="mbeanServer" />

</beans>
}}}

*Spring raw configuration sample:*
{{{
 <beans ... >
    <context:mbean-server id="rawMbeanServer" />
    <bean id="mbeanServer" class="fr.xebia.management.ServletContextAwareMBeanServerFactory">
       <property name="mbeanServer" ref="rawMbeanServer" />
    </bean>
    <context:mbean-export server="mbeanServer" />
    ...
 </beans>
}}} 

*Spring advanced configuration sample:*

The `"objectNameExtraAttributes"` property allows to manually add extra attributes in addition to the `"path"` (and `"host"`) attribute that is automatically added.

{{{
 <beans ... >
    <context:mbean-server id="rawMbeanServer" />
    <bean id="mbeanServer" class="fr.xebia.management.ServletContextAwareMBeanServerFactory">
       <property name="mbeanServer" ref="rawMbeanServer" />
       <property name="objectNameExtraAttributes" >
          <map>
             <entry key="ze-app-id-asked-by-ze-monitoring-team" value="my-application-id" />
          </map>
       </property>
    </bean>
    <context:mbean-export server="mbeanServer" />
    ...
 </beans>
}}} 

An object name `"net.sf.ehcache:CacheManager=my-cache-manager,name=my-cache,type=Cache"` will be registered as `"net.sf.ehcache:CacheManager=my-cache-manager,ze-app-id-asked-by-ze-monitoring-team=my-application-id,name=my-cache,type=Cache,host=localhost,path=/my-application"` for an application "my-application" declared in the "localhost" host of a Tomcat server: attributes `"path=/my-application"`,  `"host=localhost"`and  `"ze-app-id-asked-by-ze-monitoring-team=my-application-id"` are added to the object name.


---- 

(1) See [XebiaManagementExtrasHypericPlugins]