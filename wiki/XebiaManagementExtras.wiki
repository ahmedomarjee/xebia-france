#summary JMX based extras to ease monitoring.
#labels Featured

= Introduction =

Extras on top of Java SE (e.g. Thread Pool) and Spring Framework (e.g. JMS Listener) to ease monitoring. This library provides simple Spring XML namespace based configuration to expose JMX MBeans as well as jsp pages and [http://www.hyperic.com/ Hyperic HQ] plugin to monitor these JMX MBeans.

= Table of Content =

<wiki:toc max_depth="2" />

= Monitoring JMX MBeans =

== @Profiled Annotation ==

See [ProfiledAnnotation] page. Monitor methods invocations via JMX MBeans declaring:
  {{{
public class MyService {

   @Profiled
   public void myOperation(...) {
      ...
   }
}
}}}

== JMX MBean enabled Jakarta Commons DBCP JDBC `DataSource` ==

See [ManagedBasicDataSource]. Offer to your [http://commons.apache.org/dbcp/ Jakarta Commons DBCP Data Source] JMX MBean based monitoring and Spring XML namespace based configuration declaring :
   {{{
<beans ...>
   <management:dbcp-datasource id="myDataSource">
      <management:url value="jdbc:h2:mem:dbcp-test" />
      <management:driver-class-name value="org.h2.Driver" />
      <management:username value="sa" />
      <management:password value="" />
      <management:max-active value="10" />
      <!-- ... any other useful configuration param -->
   </management:dbcp-datasource>
   ...
</beans>
}}}

== `EhCache` JMX MBeans ==

[http://ehcache.org/ EhCache] already has all the JMX MBeans needed to monitor caches, simply expose them declaring:
   {{{
<beans ...>
   ...
   <management:eh-cache-management-service 
      mbean-server="mbeanServer" 
      cache-manager="cacheManager" />

</beans>
}}}

==  Java Util Concurrent Executor Service / Thread Pool Executor Monitoring ==

See [ManagedExecutorService]. Declare a fully managed `ExecutorService`/ `ThreadPoolExecutor` with JMX MBean based monitoring declaring:
   {{{
<beans ...>
   <management:executor-service 
       id="my-executor" 
       pool-size="1-10" 
       queue-capacity="5" />
   ...
</beans>
}}}

== JMS ConnectionFactory Monitoring ==

See [ManagedJmsConnectionFactory]. Expose metrics of a JMS `ConnectionFactory` via a JMX MBean with:
   {{{
<beans ...>
   <!-- wrap 'myConnectionFactory' in a JMX enabled connection factory -->
   <management:jms-connection-factory-wrapper 
      id="connectionFactory" 
      connection-factory="myConnectionFactory" />
   ...
</beans>
}}}

== Spring JMS Caching Connection Factory Monitoring ==

See [ManagedCachingConnectionFactory]. Expose your Spring JMS `CachingConnectionFactory` via a JMX MBean (reset connections via JMX, etc) declaring:

   {{{
<beans ...>
   <!-- wrap 'rawConnectionFactory' in a JMX enabled caching connection factory -->
   <management:jms-caching-connection-factory 
      id="connectionFactory" 
      connection-factory="rawConnectionFactory" />
   ...

</beans>
}}}

== Managed Spring JMS `DefaultMessageListenerContainer` ==

See [ManagedSpringJmsDefaultMessageListenerContainer]. {{{ManagedDefaultMessageListenerContainer}}} adds JMX based monitoring (active consumers count, etc) and control (start and stop) to Spring's JMS Listener Container (DefaultMessageListenerContainer). Simply define the {{{container-class}}} like:
  {{{
<beans ...>
   <jms:listener-container 
      connection-factory="connectionFactory" 
      concurrency="5-10"
      container-class="fr.xebia.springframework.jms.ManagedDefaultMessageListenerContainer">
      <jms:listener destination="my-queue" ref="myMessageListener" />
      
   </jms:listener-container>
   ...
</beans>
}}}

= JMX helpers =

== Servlet Context Aware MBean Server ==

See [ServletContextAwareMbeanServer]. Prevent collision of JMX MBeans of collocated web application suffixing ObjectNames with attributes uniquely identifying your web application ( {{{servletContext.contextPath}}} , {{{tomcatServletContext.hostName}}} , etc) replacing the {{{<context:mbean-server />}}} by:

   {{{
<beans ...>

   <management:servlet-context-aware-mbean-server id="mbeanServer"/>
   ...
</beans>
}}}

= How to Integrate this library in your project / Download = 

There are different ways to integrate these features in your project:
 * Maven integration :
   {{{
<project ...>
   <dependencies>
      <dependency>
         <groupId>fr.xebia.management</groupId>
         <artifactId>xebia-management-extras</artifactId>
         <version>1.0.0</version>
      </dependency>
      ...
   </dependencies>
   ...
</project>
}}}

  The artifact is deployed on [http://repo1.maven.org/maven2/ Maven Central Repository].
 * Download the jar [http://xebia-france.googlecode.com/files/xebia-management-extras-1.0.0.jar xebia-management-extras-1.0.0.jar] ([http://xebia-france.googlecode.com/files/xebia-management-extras-1.0.0-sources.jar sources]),
 * Get the source from svn, modify it if needed and add it to your project. The source is available under the Open Source licence [http://www.apache.org/licenses/LICENSE-2.0 Apache Software Licence 2] at http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/ .

= Developers =

 * Source : http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/