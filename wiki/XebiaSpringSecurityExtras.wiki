#summary Spring Security extras (audit, etc)
#labels Featured

= Introduction =

Spring Security addons. This code is not provided by SpringSource nor by the Spring Framework Project.

= Audit =

== @Audited ==

{{{@Audited}}} annotation writes an info message in the underlying SLF4J "{{{fr.xebia.audit}}}" logger each time the method is invoked

 * Usage pattern:
{{{
@Audited(message = "transferMoney(#{args[0].accountNumber}, #{args[1].accountNumber}, #{args[3].amount})")
public void transferMoney(Account from, Account to, Amount amount) throws BusinessException { ... }
}}}
 * Emitted message format: {{{"$date{yyyy/MM/dd-HH:mm:ss:SSS} ${message} [throwing ${exception.toString()}] by ${spring-security.principal.name} [coming from ${spring-security.principal.ip}]"}}}
 * Sample of message: {{{"2010-08-11T00:23:05.353+0200 save(John Smith, john.smith@xebia.fr): 324325 by ze-principal coming from 10.0.0.1"}}}
 * Spring Framework Configuration :
 {{{
<beans ...
   xmlns:security-extras="http://www.xebia.fr/schema/xebia-spring-security-extras"
   xsi:schemaLocation="...
        http://www.xebia.fr/schema/xebia-spring-security-extras http://xebia-france.googlecode.com/svn/schema/security/xebia-spring-security-extras.xsd
        ">

    <aop:aspectj-autoproxy/>
    <security-extras:audit-aspect />
    ...
    
</beans>
}}}
 Setting {{{proxy-target-class="true"}}} is not always required, a test with your code.
 * This annotation relies Spring Security to get the authenticated user name and its ip address
 * The {{{message}}} attribute uses Spring Expression Language; available variables are:
  * {{{args}}}: the array of methods arguments,
  * {{{invokedObject}}}: the invoked object instance,
  * {{{throwned}}}: the exception if one has been throwned
  * {{{returned}}}: the returned value.
 * Logback configuration sample:
  {{{
<configuration scan="true">
   ...
   <appender name="audit-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
      <file>${LOGS_FOLDER}/my-application-audit.log</file>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
         <fileNamePattern>${LOGS_TO_COLLECT_FOLDER}/my-application-audit.%d{yyyyMMdd-HHmm}.log.gzip</fileNamePattern>
      </rollingPolicy>
      <encoder>
         <pattern>%m %throwable{0}%n</pattern>
      </encoder>
   </appender>

   <logger name="fr.xebia.audit" additivity="false" level="TRACE">
      <appender-ref ref="audit-file" />
   </logger>
   ...
</configuration>
}}}
 * Log4j configuration sample:
  {{{
log4j.appender.auditfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.auditfile.datePattern='-'yyyyMMdd
log4j.appender.auditfile.file=${catalina.base}/logs/my-application-audit.log
log4j.appender.auditfile.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.auditfile.layout.conversionPattern=%m %throwable{short}\n

log4j.logger.fr.xebia.audit=INFO, auditfile
}}}
 * Implementation details: this annotation works with an aspect and requires [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html Spring AOP]

== Auditor ==

 * Usage pattern:
{{{
public void transferMoney(...) throws BusinessException {
   ...
   Auditor.audit("Tranfer " + amount + " from " + fromAccount + " to " + toAccount);
}
}}}
 * Emitted message format : {{{"$date{yyyy/MM/dd-HH:mm:ss:SSS} ${message} [throwing ${exception.toString()}] by ${spring-security.principal.name} [coming from ${spring-security.principal.ip}]"}}}
 * Sample of message: {{{"2010-08-11T00:23:05.353+0200 Transfer 1000 euros from account[12345] to account[9876] by ze-principal coming from 10.0.0.1"}}}
 * This annotation relies Spring Security to get the authenticated user name and its ip address
 * Logback and log4j configuration sample: see @Audited above

= How to Integrate this library in your project =

There are different ways to integrate these features in your project:
 * Maven integration :
   {{{
<project ...>
   <dependencies>
      <dependency>
         <groupId>fr.xebia.springframework</groupId>
         <artifactId>xebia-spring-security-extras</artifactId>
         <version>1.1.5</version>
      </dependency>
      ...
   </dependencies>
   ...
</project>
}}}
  The artifact is deployed on [https://oss.sonatype.org/content/repositories/public/fr/xebia/springframework/xebia-spring-security-extras/1.1.5/ Sonatype OSS repo] and should soon be synced on http://repo1.maven.org/ (as of 2011/11/13).
 * Download the jar [http://xebia-france.googlecode.com/files/xebia-spring-security-extras-1.1.5.jar xebia-spring-security-extras-1.1.5.jar] ([http://xebia-france.googlecode.com/files/xebia-spring-security-extras-1.1.5-sources.jar sources]),
 * Get the source from svn, modify it if needed and add it to your project. The source is available under the Open Source licence [http://www.apache.org/licenses/LICENSE-2.0 Apache Software Licence 2] at http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/ .

= Developers =

 * Source : http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/