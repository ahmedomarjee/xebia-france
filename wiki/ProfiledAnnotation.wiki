#summary @Profiled annotation to declaratively profile methods and expose the metrics (invocation counts, duration, exception count, slow invocations count, etc) via JMX MBeans

=  @Profiled Annotation =

{{{@Profiled}}} / {{{@fr.xebia.management.statistics.Profiled}}} allows to monitor methods execution declaratively.

 * Basic java sample
  {{{
package com.mycompany;
public class MyService {

   @Profiled
   public void myOperation(...) {
      ...
   }
}
 Will create a MBean  
}}}
 * Advanced java sample
  {{{
public class MyService {

   @Profiled(
      name = "my-operation", 
      businessExceptionsTypes = {MyBusinessException.class}, 
      communicationExceptionsTypes = {IOException.class, ...}, 
      slowInvocationThresholdInMillis = 100, 
      verySlowInvocationThresholdInMillis = 200)
   public void myOperation(...) throws MybusinessException {
      ...
   }
}
}}}
 * JMX Object Name: {{{"fr.xebia:type=ServiceStatistics,name=${name}"}}} where {{{"${name}"}}} is defined declaratively ({{{@Profiled(name="my-operation")}}}) or build from the class and method name with one of the following strategies :
  ** FULLY_QUALIFIED_NAME (e.g. {{{"com.mycompany.MyService.myMethod"}}})
  ** COMPACT_FULLY_QUALIFIED_NAME (e.g. {{{"c.m.MyService.myMethod"}}})
  ** SHORT_NAME (e.g. {{{"MyService.myMethod"}}})
 * Metrics: 
  ** {{{ActiveCount}}}: number of currently active executor threads, 
  ** {{{InvocationCount}}}: number of invocations
  ** {{{SlowInvocationCount}}}: number of slow invocation (@Profiled.slowInvocationThreshold < invocationDuration < @Profiled.verySlowInvocationThreshold)
  ** {{{VerySlowInvocationCount}}}: number of very slow invocations (@Profiled.verySlowInvocationThreshold < invocationDuration)
  ** {{{BusinessExceptionCount}}}: number of business exceptions (invocations throwing exceptions which are instances of one of the @Profiled.businessExceptionTypes)
  ** {{{CommunicationExceptionCount}}}: number of communication exceptions (invocations throwing exceptions which are instances of one of the @Profiled.communicationExceptionTypes)
  ** {{{OtherExceptionCount}}}: number of other exceptions (invocations throwing exceptions which are not communication nor business exceptions)
  ** {{TotalDurationInNanos}}: total duration of the invocations

 * Spring namespace based configuration :
   {{{
<beans ...
   xmlns:management="http://www.xebia.fr/schema/xebia-management-extras"
   xsi:schemaLocation="...
      http://www.xebia.fr/schema/xebia-management-extras http://xebia-france.googlecode.com/svn/schema/management/xebia-management-extras.xsd">
   <!-- enable AOP to intercept @Profiled annotation -->
   <aop:aspectj-autoproxy />
   <!-- mbean server wil hold the ServiceStatistics mbeans used by @Profiled -->
   <context:mbean-server />
   
   <management:profile-aspect server="mbeanServer" />
   ...
</beans>
}}}
 * Spring raw configuration:
  {{{
<beans ...>
   <!-- enable AOP to intercept @Profiled annotation -->
   <aop:aspectj-autoproxy />
   <!-- mbean server wil hold the ServiceStatistics mbeans used by @Profiled -->
   <context:mbean-server />

   <bean id="profileAspect" class="fr.xebia.management.statistics.ProfileAspect" />
   ...

</beans>
}}} 
 * JSP monitoring page : [http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/main/webapp/jmx/profiled-services.jsp (source)], <a href="http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/site/monitoring-jsp-profiled-service.png" target="screenshot"><img src="http://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/site/monitoring-jsp-profiled-service.png" height="30"/></a>,
 * Hyperic plugin: [https://xebia-france.googlecode.com/svn/management/xebia-management-extras/trunk/src/main/hyperic/tomcat-extras-service-plugin.xml tomcat-extras-service-plugin.xml] (1)