#summary @Audited annotation writes an info message in the underlying SLF4J "fr.xebia.audit" logger each time the method is invoked.

= @Audited Annotation =

{{{@Audited}}} annotation writes an info message in the underlying SLF4J "{{{fr.xebia.audit}}}" logger each time the method is invoked

== Usage pattern ==

Decorate the method you want to audit with a {{{@Audited}}} annotation like this:
{{{
@Audited(message = "transferMoney(#{args[0].accountNumber}, #{args[1].accountNumber}, #{args[3].amount})")
public void transferMoney(Account from, Account to, Amount amount) throws BusinessException { ... }
}}}

The {{{message}}} attribute uses Spring Expression Language; available variables are:
 * {{{args}}}: the array of methods arguments,
 * {{{invokedObject}}}: the invoked object instance,
 * {{{throwned}}}: the exception if one has been throwned,
 * {{{returned}}}: the returned value.


== Spring Framework Configuration ==

The {{{@Audited}}} annotation uses Spring AOP to intercept the method calls and uses Spring XML namespace configuration to ease its integration with a simple {{{<security-extras:audit-aspect />}}} in your Spring configuration file.

 {{{
<beans ...
   xmlns:security-extras="http://www.xebia.fr/schema/xebia-spring-security-extras"
   xsi:schemaLocation="...
        http://www.xebia.fr/schema/xebia-spring-security-extras http://www.xebia.fr/schema/security/xebia-spring-security-extras.xsd
        ">

   <!-- enable Spring AOP --> 
   <aop:aspectj-autoproxy/>

  <!-- activate the AutitAspect --> 
  <security-extras:audit-aspect />
    ...
</beans>
}}}

Note : If you face a {{{IllegalArgumentException: MetadataMBeanInfoAssembler does not support JDK dynamic proxies - export the target beans directly or use CGLIB proxies instead}}}, then you need tell AspectJ to use CGLib proxies adding the attribute {{{proxy-target-class="true"}}} like {{{<aop:aspectj-autoproxy proxy-target-class="true" />}}}.

The {{{@Audited}}} annotation relies on a standard [http://static.springsource.org/spring-security/ Spring Security]  configuration to get the name of the authenticated user name and its ip address (if used in a web application). 
It simply uses {{{SecurityContextHolder.getContext().getAuthentication()}}} and the {{{WebAuthenticationDetails}}} if present.

For more details about Spring Security configuration, please refer to the [http://static.springsource.org/spring-security/site/docs/3.0.x/reference/ns-config.html#ns-getting-started official documentation]. 

== Generated Audit Messages ==

Audit messages are generated in the SLF4J logger named {{{fr.xebia.audit}}} with the pattern: 
{{{"$date{yyyy/MM/dd-HH:mm:ss:SSS} ${message} [throwing ${exception.toString()}] by ${spring-security.principal.name} [coming from ${spring-security.principal.ip}]"}}}.

If an exception is throwned, the log message is emitted at the {{{WARN}}} level ; otherwise, the {{{INFO}}} level is used.

Sample of message for a {{{@Audited(message = "save(#{args[0].name}, #{args[0].email}): #{returned?.id}")}}}: 
 * In case of successful invocation
   {{{
2010-08-11T00:23:05.353+0200 save(John Smith, john.smith@xebia.fr): 324325 by ze-principal coming from 10.0.0.1
}}}
 * In the method invocation throwned anexception
   {{{
2010-08-11T00:23:05.353+0200 save(John Smith, john.smith_at_xebia.fr): threw 'java.lang.IllegalArgumentException: invalid email' by ze-principal coming from 10.0.0.1
}}}

== Logging Framework Configuration ==

The {{{@Audited}}} annotation relies on [http://www.slf4j.org/ SLF4J] to generate its audit messages. We like very much using the [http://logback.qos.ch/ LogBack] implementation with its powerful feature of moving _rolled backed_ files in another folder but [http://logging.apache.org/log4j/1.2/index.html Log4j] is also well suited for this task.

Note that the appender is not configured to append the date, the thread name or the log level, the audit aspect already appends the date and the thread and level are usually not necessary for auditing.

=== Logback configuration sample ===

This Logback configuration fragment shows how to log "{{{fr.xebia.audit}}}" audit messages in a file named  "{{{my-application-audit.log}}}" that is rolled and zipped every night to a collect folder ({{{${LOGS_TO_COLLECT_FOLDER} }}}).

  {{{
<configuration scan="true">
   ...
   <appender name="audit-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
      <file>${LOGS_FOLDER}/my-application-audit.log</file>
      <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
         <fileNamePattern>${LOGS_TO_COLLECT_FOLDER}/my-application-audit.%d{yyyyMMdd-HHmm}.log.gzip</fileNamePattern>
      </rollingPolicy>
      <encoder>
         <pattern>%m %throwable{0}%n</pattern>
      </encoder>
   </appender>

   <logger name="fr.xebia.audit" additivity="false" level="TRACE">
      <appender-ref ref="audit-file" />
   </logger>
   ...
</configuration>
}}}

=== Log4j configuration sample ===

This Log4j configuration fragment shows how to log "{{{fr.xebia.audit}}}" audit messages in a file named  "{{{my-application-audit.log}}}" that is rolled every night.

  {{{
log4j.appender.auditfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.auditfile.datePattern='-'yyyyMMdd
log4j.appender.auditfile.file=${catalina.base}/logs/my-application-audit.log
log4j.appender.auditfile.layout=org.apache.log4j.EnhancedPatternLayout
log4j.appender.auditfile.layout.conversionPattern=%m %throwable{short}\n

log4j.logger.fr.xebia.audit=INFO, auditfile
}}}

== Implementation details ==

Method interception is performed thanks to [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html Spring AOP] and [http://www.eclipse.org/aspectj/ AspectJ]'s [http://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/org/aspectj/lang/annotation/Around.html @Around] annotation (see [http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/src/main/java/fr/xebia/audit/AuditAspect.java AuditAspect.java]).

Expression language based audit message is performed using [http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch07.html Spring Expression Language]'s [http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/expression/spel/standard/SpelExpressionParser.html SpelExpressionParser] (see [http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/src/main/java/fr/xebia/audit/AuditAspect.java AuditAspect.java]).

Spring XML namespace based configuration is performed thanks to Spring's [http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/apbs04.html BeanDefinitionParser] (see [http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/src/main/java/fr/xebia/springframework/security/config/AuditAspectDefinitionParser.java AuditAspectDefinitionParser.java]).


== Auditing without the @Audited annotation ==

In some cases, using the {{{@Audited}}} annotation is awkward (auditing in the middle of a method, building complex messages, etc) and it is easier to directly use the Java component like this :
 * Usage pattern:
{{{
public void transferMoney(...) throws BusinessException {
   ...
   Auditor.audit("Tranfer " + amount + " from " + fromAccount + " to " + toAccount);
}
}}}
 * Emitted message format : {{{"$date{yyyy/MM/dd-HH:mm:ss:SSS} ${message} [throwing ${exception.toString()}] by ${spring-security.principal.name} [coming from ${spring-security.principal.ip}]"}}}
 * Sample of message: {{{"2010-08-11T00:23:05.353+0200 Transfer 1000 euros from account[12345] to account[9876] by ze-principal coming from 10.0.0.1"}}}
 * This annotation relies Spring Security to get the authenticated user name and its ip address
 * Logback and log4j configuration sample: see @Audited above

= How to Integrate this library in your project =

There are different ways to integrate these features in your project:
 * Maven integration :
   {{{
<project ...>
   <dependencies>
      <dependency>
         <groupId>fr.xebia.springframework</groupId>
         <artifactId>xebia-spring-security-extras</artifactId>
         <version>1.1.5</version>
      </dependency>
      ...
   </dependencies>
   ...
</project>
}}}

 * Download the jar [http://xebia-france.googlecode.com/files/xebia-spring-security-extras-1.1.5.jar xebia-spring-security-extras-1.1.5.jar] ([http://xebia-france.googlecode.com/files/xebia-spring-security-extras-1.1.5-sources.jar sources]),
 * Get the source from svn, modify it if needed and add it to your project. The source is available under the Open Source licence [http://www.apache.org/licenses/LICENSE-2.0 Apache Software Licence 2] at http://xebia-france.googlecode.com/svn/springframework/xebia-spring-security-extras/trunk/ .