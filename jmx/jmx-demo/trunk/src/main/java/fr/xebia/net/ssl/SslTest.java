/* * Created on Jan 2, 2006 */package fr.xebia.net.ssl;import java.net.URL;import java.security.KeyStore;import java.security.SecureRandom;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import javax.net.ssl.TrustManager;import javax.net.ssl.TrustManagerFactory;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.methods.GetMethod;import org.junit.Ignore;import org.junit.Test;public class SslTest {    static {        //System.setProperty("javax.net.debug", "all");    }    @Ignore    @Test    public void testTrustManagerFactory() throws Exception {        String defaultAlgorithm = TrustManagerFactory.getDefaultAlgorithm();        System.out.println(defaultAlgorithm);        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        trustManagerFactory.init((KeyStore)null);        for (TrustManager trustManager : trustManagerFactory.getTrustManagers()) {            System.out.println(trustManager);        }    }    @Test    public void testDisableCertificateValidation() throws Exception {        // HttpsURLConnection.setDefaultSSLSocketFactory(new EasySSLSocketFactory());        // Now you can access an https URL without having the certificate in the truststore        URL url = new URL("https://localhost");        HttpsURLConnection httpsURLConnection = (HttpsURLConnection)url.openConnection();        httpsURLConnection.setSSLSocketFactory(new EasySSLSocketFactory());        httpsURLConnection.connect();                SSLContext acceptAllCertificatesSslContext = SSLContext.getInstance("SSL");        TrustManager[] acceptAllCertificatesTrustManagers = new TrustManager[] {            new AcceptAllCertificatesX509TrustManager(null)        };        acceptAllCertificatesSslContext.init(null, acceptAllCertificatesTrustManagers, new SecureRandom());        SSLContext.setDefault(acceptAllCertificatesSslContext);                HttpsURLConnection.setDefaultSSLSocketFactory(new EasySSLSocketFactory());        HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {                        @Override            public boolean verify(String arg0, SSLSession arg1) {                return true;            }        });                HttpClient httpclient = new HttpClient();        GetMethod httpget = new GetMethod("https://localhost/");        try {          httpclient.executeMethod(httpget);          System.out.println(httpget.getStatusLine());        } finally {          httpget.releaseConnection();        }    }}